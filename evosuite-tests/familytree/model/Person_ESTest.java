/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 02 22:51:03 GMT 2019
 */

package familytree.model;

import static org.evosuite.runtime.EvoAssertions.verifyException;
import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertFalse;
import static org.junit.Assert.assertNotNull;
import static org.junit.Assert.assertNotSame;
import static org.junit.Assert.assertNull;
import static org.junit.Assert.assertTrue;
import static org.junit.Assert.fail;

import java.util.Calendar;
import java.util.GregorianCalendar;
import java.util.Locale;
import java.util.TimeZone;
import java.util.Vector;

import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.Test;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false, useJEE = true) 
public class Person_ESTest extends Person_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Person person0 = Person.restorePerson(0, "", "", false);
      assertNotNull(person0);
      assertEquals(0, person0.getId());
      assertFalse(person0.isFemale());
      assertEquals("", person0.getFirstName());
      assertEquals("", person0.getLastName());
      assertEquals(0, person0.getGenderAsInt());
      assertEquals("male", person0.getGender());
      
      GregorianCalendar gregorianCalendar0 = person0.getDateOfBirth();
      assertNotNull(gregorianCalendar0);
      assertEquals(0, person0.getId());
      assertFalse(person0.isFemale());
      assertEquals("", person0.getFirstName());
      assertEquals("", person0.getLastName());
      assertEquals(0, person0.getGenderAsInt());
      assertEquals("male", person0.getGender());
      assertEquals(4, gregorianCalendar0.getMinimalDaysInFirstWeek());
      assertTrue(gregorianCalendar0.isLenient());
      assertEquals("java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=?,YEAR=?,MONTH=?,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=?,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=?,HOUR=?,HOUR_OF_DAY=?,MINUTE=?,SECOND=?,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", gregorianCalendar0.toString());
      assertEquals(2, gregorianCalendar0.getFirstDayOfWeek());
      
      gregorianCalendar0.roll(1, true);
      assertEquals(0, person0.getId());
      assertFalse(person0.isFemale());
      assertEquals("", person0.getFirstName());
      assertEquals("", person0.getLastName());
      assertEquals(0, person0.getGenderAsInt());
      assertEquals("male", person0.getGender());
      assertEquals(4, gregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals("java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=1971,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]", gregorianCalendar0.toString());
      assertTrue(gregorianCalendar0.isLenient());
      assertEquals(2, gregorianCalendar0.getFirstDayOfWeek());
      
      boolean boolean0 = person0.dateOfDeathEquals(gregorianCalendar0);
      assertEquals(0, person0.getId());
      assertFalse(person0.isFemale());
      assertEquals("", person0.getFirstName());
      assertEquals("", person0.getLastName());
      assertEquals(0, person0.getGenderAsInt());
      assertEquals("male", person0.getGender());
      assertEquals(4, gregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals("java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=1971,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]", gregorianCalendar0.toString());
      assertTrue(gregorianCalendar0.isLenient());
      assertEquals(2, gregorianCalendar0.getFirstDayOfWeek());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Person person0 = Person.restorePerson(0, "", "", false);
      assertNotNull(person0);
      assertEquals(0, person0.getId());
      assertEquals("male", person0.getGender());
      assertFalse(person0.isFemale());
      assertEquals("", person0.getFirstName());
      assertEquals(0, person0.getGenderAsInt());
      assertEquals("", person0.getLastName());
      
      GregorianCalendar gregorianCalendar0 = person0.getDateOfBirth();
      assertNotNull(gregorianCalendar0);
      assertEquals(0, person0.getId());
      assertEquals("male", person0.getGender());
      assertFalse(person0.isFemale());
      assertEquals("", person0.getFirstName());
      assertEquals(0, person0.getGenderAsInt());
      assertEquals("", person0.getLastName());
      assertTrue(gregorianCalendar0.isLenient());
      assertEquals(4, gregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals("java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=?,YEAR=?,MONTH=?,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=?,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=?,HOUR=?,HOUR_OF_DAY=?,MINUTE=?,SECOND=?,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", gregorianCalendar0.toString());
      assertEquals(2, gregorianCalendar0.getFirstDayOfWeek());
      
      gregorianCalendar0.roll(0, false);
      assertEquals(0, person0.getId());
      assertEquals("male", person0.getGender());
      assertFalse(person0.isFemale());
      assertEquals("", person0.getFirstName());
      assertEquals(0, person0.getGenderAsInt());
      assertEquals("", person0.getLastName());
      assertEquals("java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=0,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]", gregorianCalendar0.toString());
      assertTrue(gregorianCalendar0.isLenient());
      assertEquals(4, gregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals(2, gregorianCalendar0.getFirstDayOfWeek());
      
      GregorianCalendar gregorianCalendar1 = new GregorianCalendar(0, 1, 1, 0, 0, 0);
      assertNotNull(gregorianCalendar1);
      assertEquals(4, gregorianCalendar1.getMinimalDaysInFirstWeek());
      assertEquals("java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=?,YEAR=0,MONTH=1,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=1,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", gregorianCalendar1.toString());
      assertEquals(2, gregorianCalendar1.getFirstDayOfWeek());
      assertTrue(gregorianCalendar1.isLenient());
      assertFalse(gregorianCalendar1.equals((Object)gregorianCalendar0));
      
      person0.setDateOfDeath(gregorianCalendar1);
      assertEquals(0, person0.getId());
      assertEquals("male", person0.getGender());
      assertFalse(person0.isFemale());
      assertEquals("", person0.getFirstName());
      assertEquals(0, person0.getGenderAsInt());
      assertEquals("", person0.getLastName());
      assertEquals(4, gregorianCalendar1.getMinimalDaysInFirstWeek());
      assertEquals("java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=?,YEAR=0,MONTH=1,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=1,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", gregorianCalendar1.toString());
      assertEquals(2, gregorianCalendar1.getFirstDayOfWeek());
      assertTrue(gregorianCalendar1.isLenient());
      assertNotSame(gregorianCalendar1, gregorianCalendar0);
      assertFalse(gregorianCalendar1.equals((Object)gregorianCalendar0));
      
      boolean boolean0 = person0.dateOfDeathEquals(gregorianCalendar0);
      assertEquals(0, person0.getId());
      assertEquals("male", person0.getGender());
      assertFalse(person0.isFemale());
      assertEquals("", person0.getFirstName());
      assertEquals(0, person0.getGenderAsInt());
      assertEquals("", person0.getLastName());
      assertEquals("java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=0,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]", gregorianCalendar0.toString());
      assertTrue(gregorianCalendar0.isLenient());
      assertEquals(4, gregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals(2, gregorianCalendar0.getFirstDayOfWeek());
      assertNotSame(gregorianCalendar0, gregorianCalendar1);
      assertFalse(boolean0);
      assertFalse(gregorianCalendar0.equals((Object)gregorianCalendar1));
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Person person0 = Person.restorePerson(0, "", "", true);
      assertNotNull(person0);
      assertEquals(1, person0.getGenderAsInt());
      assertEquals("", person0.getLastName());
      assertEquals("female", person0.getGender());
      assertEquals(0, person0.getId());
      assertEquals("", person0.getFirstName());
      assertTrue(person0.isFemale());
      
      GregorianCalendar gregorianCalendar0 = person0.getDateOfDeath();
      assertNotNull(gregorianCalendar0);
      assertEquals(1, person0.getGenderAsInt());
      assertEquals("", person0.getLastName());
      assertEquals("female", person0.getGender());
      assertEquals(0, person0.getId());
      assertEquals("", person0.getFirstName());
      assertTrue(person0.isFemale());
      assertEquals(4, gregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals(2, gregorianCalendar0.getFirstDayOfWeek());
      assertEquals("java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=?,YEAR=?,MONTH=?,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=?,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=?,HOUR=?,HOUR_OF_DAY=?,MINUTE=?,SECOND=?,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", gregorianCalendar0.toString());
      assertTrue(gregorianCalendar0.isLenient());
      
      gregorianCalendar0.set(0, 0, 2);
      assertEquals(1, person0.getGenderAsInt());
      assertEquals("", person0.getLastName());
      assertEquals("female", person0.getGender());
      assertEquals(0, person0.getId());
      assertEquals("", person0.getFirstName());
      assertTrue(person0.isFemale());
      assertEquals(4, gregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals(2, gregorianCalendar0.getFirstDayOfWeek());
      assertEquals("java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=?,YEAR=0,MONTH=0,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=2,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=?,HOUR=?,HOUR_OF_DAY=?,MINUTE=?,SECOND=?,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", gregorianCalendar0.toString());
      assertTrue(gregorianCalendar0.isLenient());
      
      GregorianCalendar gregorianCalendar1 = person0.getDateOfBirth();
      assertNotNull(gregorianCalendar1);
      assertEquals(1, person0.getGenderAsInt());
      assertEquals("", person0.getLastName());
      assertEquals("female", person0.getGender());
      assertEquals(0, person0.getId());
      assertEquals("", person0.getFirstName());
      assertTrue(person0.isFemale());
      assertEquals("java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=?,YEAR=?,MONTH=?,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=?,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=?,HOUR=?,HOUR_OF_DAY=?,MINUTE=?,SECOND=?,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", gregorianCalendar1.toString());
      assertTrue(gregorianCalendar1.isLenient());
      assertEquals(2, gregorianCalendar1.getFirstDayOfWeek());
      assertEquals(4, gregorianCalendar1.getMinimalDaysInFirstWeek());
      assertNotSame(gregorianCalendar1, gregorianCalendar0);
      assertFalse(gregorianCalendar1.equals((Object)gregorianCalendar0));
      
      gregorianCalendar1.roll(0, true);
      assertEquals(1, person0.getGenderAsInt());
      assertEquals("", person0.getLastName());
      assertEquals("female", person0.getGender());
      assertEquals(0, person0.getId());
      assertEquals("", person0.getFirstName());
      assertTrue(person0.isFemale());
      assertTrue(gregorianCalendar1.isLenient());
      assertEquals("java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=0,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]", gregorianCalendar1.toString());
      assertEquals(2, gregorianCalendar1.getFirstDayOfWeek());
      assertEquals(4, gregorianCalendar1.getMinimalDaysInFirstWeek());
      assertNotSame(gregorianCalendar1, gregorianCalendar0);
      assertFalse(gregorianCalendar1.equals((Object)gregorianCalendar0));
      
      person0.setDateOfDeath(gregorianCalendar0);
      assertEquals(1, person0.getGenderAsInt());
      assertEquals("", person0.getLastName());
      assertEquals("female", person0.getGender());
      assertEquals(0, person0.getId());
      assertEquals("", person0.getFirstName());
      assertTrue(person0.isFemale());
      assertEquals(4, gregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals(2, gregorianCalendar0.getFirstDayOfWeek());
      assertEquals("java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=?,YEAR=0,MONTH=0,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=2,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=?,HOUR=?,HOUR_OF_DAY=?,MINUTE=?,SECOND=?,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", gregorianCalendar0.toString());
      assertTrue(gregorianCalendar0.isLenient());
      assertNotSame(gregorianCalendar0, gregorianCalendar1);
      assertFalse(gregorianCalendar0.equals((Object)gregorianCalendar1));
      
      boolean boolean0 = person0.dateOfDeathEquals(gregorianCalendar1);
      assertEquals(1, person0.getGenderAsInt());
      assertEquals("", person0.getLastName());
      assertEquals("female", person0.getGender());
      assertEquals(0, person0.getId());
      assertEquals("", person0.getFirstName());
      assertTrue(person0.isFemale());
      assertTrue(gregorianCalendar1.isLenient());
      assertEquals("java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=0,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]", gregorianCalendar1.toString());
      assertEquals(2, gregorianCalendar1.getFirstDayOfWeek());
      assertEquals(4, gregorianCalendar1.getMinimalDaysInFirstWeek());
      assertNotSame(gregorianCalendar1, gregorianCalendar0);
      assertFalse(boolean0);
      assertFalse(gregorianCalendar1.equals((Object)gregorianCalendar0));
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Person person0 = Person.restorePerson(0, "", "", false);
      assertNotNull(person0);
      assertEquals(0, person0.getId());
      assertEquals("male", person0.getGender());
      assertFalse(person0.isFemale());
      assertEquals("", person0.getFirstName());
      assertEquals("", person0.getLastName());
      assertEquals(0, person0.getGenderAsInt());
      
      GregorianCalendar gregorianCalendar0 = person0.getDateOfBirth();
      assertNotNull(gregorianCalendar0);
      assertEquals(0, person0.getId());
      assertEquals("male", person0.getGender());
      assertFalse(person0.isFemale());
      assertEquals("", person0.getFirstName());
      assertEquals("", person0.getLastName());
      assertEquals(0, person0.getGenderAsInt());
      assertEquals(4, gregorianCalendar0.getMinimalDaysInFirstWeek());
      assertTrue(gregorianCalendar0.isLenient());
      assertEquals(2, gregorianCalendar0.getFirstDayOfWeek());
      assertEquals("java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=?,YEAR=?,MONTH=?,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=?,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=?,HOUR=?,HOUR_OF_DAY=?,MINUTE=?,SECOND=?,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", gregorianCalendar0.toString());
      
      gregorianCalendar0.roll(1, true);
      assertEquals(0, person0.getId());
      assertEquals("male", person0.getGender());
      assertFalse(person0.isFemale());
      assertEquals("", person0.getFirstName());
      assertEquals("", person0.getLastName());
      assertEquals(0, person0.getGenderAsInt());
      assertEquals(4, gregorianCalendar0.getMinimalDaysInFirstWeek());
      assertTrue(gregorianCalendar0.isLenient());
      assertEquals(2, gregorianCalendar0.getFirstDayOfWeek());
      assertEquals("java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=1971,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]", gregorianCalendar0.toString());
      
      boolean boolean0 = person0.dateOfBirthEquals(gregorianCalendar0);
      assertEquals(0, person0.getId());
      assertEquals("male", person0.getGender());
      assertFalse(person0.isFemale());
      assertEquals("", person0.getFirstName());
      assertEquals("", person0.getLastName());
      assertEquals(0, person0.getGenderAsInt());
      assertEquals(4, gregorianCalendar0.getMinimalDaysInFirstWeek());
      assertTrue(gregorianCalendar0.isLenient());
      assertEquals(2, gregorianCalendar0.getFirstDayOfWeek());
      assertEquals("java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=1971,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]", gregorianCalendar0.toString());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Person person0 = new Person("", "", true);
      //  // Unstable assertion: assertNotNull(person0);
      //  // Unstable assertion: assertEquals("", person0.getLastName());
      //  // Unstable assertion: assertEquals(40, person0.getId());
      //  // Unstable assertion: assertEquals(1, person0.getGenderAsInt());
      //  // Unstable assertion: assertEquals("female", person0.getGender());
      //  // Unstable assertion: assertEquals("", person0.getFirstName());
      //  // Unstable assertion: assertTrue(person0.isFemale());
      
      TimeZone timeZone0 = TimeZone.getDefault();
      //  // Unstable assertion: assertNotNull(timeZone0);
      //  // Unstable assertion: assertEquals("GMT", timeZone0.getID());
      
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      Locale locale0 = Locale.getDefault(locale_Category0);
      //  // Unstable assertion: assertNotNull(locale0);
      //  // Unstable assertion: assertEquals("en_CA", locale0.toString());
      //  // Unstable assertion: assertEquals("CA", locale0.getCountry());
      //  // Unstable assertion: assertEquals("en", locale0.getLanguage());
      //  // Unstable assertion: assertEquals("CAN", locale0.getISO3Country());
      //  // Unstable assertion: assertEquals("", locale0.getVariant());
      //  // Unstable assertion: assertEquals("eng", locale0.getISO3Language());
      
      Calendar calendar0 = Calendar.getInstance(timeZone0, locale0);
      //  // Unstable assertion: assertNotNull(calendar0);
      //  // Unstable assertion: assertEquals("GMT", timeZone0.getID());
      //  // Unstable assertion: assertEquals("en_CA", locale0.toString());
      //  // Unstable assertion: assertEquals("CA", locale0.getCountry());
      //  // Unstable assertion: assertEquals("en", locale0.getLanguage());
      //  // Unstable assertion: assertEquals("CAN", locale0.getISO3Country());
      //  // Unstable assertion: assertEquals("", locale0.getVariant());
      //  // Unstable assertion: assertEquals("eng", locale0.getISO3Language());
      //  // Unstable assertion: assertTrue(calendar0.isLenient());
      //  // Unstable assertion: assertEquals("java.util.GregorianCalendar[time=1570056656608,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2019,MONTH=9,WEEK_OF_YEAR=40,WEEK_OF_MONTH=1,DAY_OF_MONTH=2,DAY_OF_YEAR=275,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=1,AM_PM=1,HOUR=10,HOUR_OF_DAY=22,MINUTE=50,SECOND=56,MILLISECOND=608,ZONE_OFFSET=0,DST_OFFSET=0]", calendar0.toString());
      //  // Unstable assertion: assertEquals(1, calendar0.getFirstDayOfWeek());
      //  // Unstable assertion: assertEquals(1, calendar0.getMinimalDaysInFirstWeek());
      
      GregorianCalendar gregorianCalendar0 = new GregorianCalendar(0, 0, 155, 0, 0);
      //  // Unstable assertion: assertNotNull(gregorianCalendar0);
      //  // Unstable assertion: assertTrue(gregorianCalendar0.isLenient());
      //  // Unstable assertion: assertEquals("java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=?,YEAR=0,MONTH=0,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=155,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", gregorianCalendar0.toString());
      //  // Unstable assertion: assertEquals(2, gregorianCalendar0.getFirstDayOfWeek());
      //  // Unstable assertion: assertEquals(4, gregorianCalendar0.getMinimalDaysInFirstWeek());
      //  // Unstable assertion: assertFalse(gregorianCalendar0.equals((Object)calendar0));
      
      person0.setDateOfBirth(gregorianCalendar0);
      //  // Unstable assertion: assertEquals("", person0.getLastName());
      //  // Unstable assertion: assertEquals(40, person0.getId());
      //  // Unstable assertion: assertEquals(1, person0.getGenderAsInt());
      //  // Unstable assertion: assertEquals("female", person0.getGender());
      //  // Unstable assertion: assertEquals("", person0.getFirstName());
      //  // Unstable assertion: assertTrue(person0.isFemale());
      //  // Unstable assertion: assertTrue(gregorianCalendar0.isLenient());
      //  // Unstable assertion: assertEquals("java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=?,YEAR=0,MONTH=0,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=155,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", gregorianCalendar0.toString());
      //  // Unstable assertion: assertEquals(2, gregorianCalendar0.getFirstDayOfWeek());
      //  // Unstable assertion: assertEquals(4, gregorianCalendar0.getMinimalDaysInFirstWeek());
      //  // Unstable assertion: assertNotSame(gregorianCalendar0, calendar0);
      //  // Unstable assertion: assertFalse(gregorianCalendar0.equals((Object)calendar0));
      
      boolean boolean0 = person0.dateOfBirthEquals(calendar0);
      //  // Unstable assertion: assertEquals("", person0.getLastName());
      //  // Unstable assertion: assertEquals(40, person0.getId());
      //  // Unstable assertion: assertEquals(1, person0.getGenderAsInt());
      //  // Unstable assertion: assertEquals("female", person0.getGender());
      //  // Unstable assertion: assertEquals("", person0.getFirstName());
      //  // Unstable assertion: assertTrue(person0.isFemale());
      //  // Unstable assertion: assertEquals("GMT", timeZone0.getID());
      //  // Unstable assertion: assertEquals("en_CA", locale0.toString());
      //  // Unstable assertion: assertEquals("CA", locale0.getCountry());
      //  // Unstable assertion: assertEquals("en", locale0.getLanguage());
      //  // Unstable assertion: assertEquals("CAN", locale0.getISO3Country());
      //  // Unstable assertion: assertEquals("", locale0.getVariant());
      //  // Unstable assertion: assertEquals("eng", locale0.getISO3Language());
      //  // Unstable assertion: assertTrue(calendar0.isLenient());
      //  // Unstable assertion: assertEquals("java.util.GregorianCalendar[time=1570056656608,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2019,MONTH=9,WEEK_OF_YEAR=40,WEEK_OF_MONTH=1,DAY_OF_MONTH=2,DAY_OF_YEAR=275,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=1,AM_PM=1,HOUR=10,HOUR_OF_DAY=22,MINUTE=50,SECOND=56,MILLISECOND=608,ZONE_OFFSET=0,DST_OFFSET=0]", calendar0.toString());
      //  // Unstable assertion: assertEquals(1, calendar0.getFirstDayOfWeek());
      //  // Unstable assertion: assertEquals(1, calendar0.getMinimalDaysInFirstWeek());
      //  // Unstable assertion: assertNotSame(calendar0, gregorianCalendar0);
      //  // Unstable assertion: assertFalse(boolean0);
      //  // Unstable assertion: assertFalse(calendar0.equals((Object)gregorianCalendar0));
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Person person0 = Person.restorePerson(1, (String) null, "", true);
      assertNotNull(person0);
      assertEquals(1, person0.getGenderAsInt());
      assertEquals("female", person0.getGender());
      assertTrue(person0.isFemale());
      assertEquals(1, person0.getId());
      assertEquals("", person0.getLastName());
      assertNull(person0.getFirstName());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Person person0 = Person.restorePerson(0, "", "", false);
      assertNotNull(person0);
      assertEquals("", person0.getLastName());
      assertEquals(0, person0.getGenderAsInt());
      assertFalse(person0.isFemale());
      assertEquals("", person0.getFirstName());
      assertEquals(0, person0.getId());
      assertEquals("male", person0.getGender());
      
      person0.setFemale(true);
      assertEquals("female", person0.getGender());
      assertEquals("", person0.getLastName());
      assertEquals(1, person0.getGenderAsInt());
      assertEquals("", person0.getFirstName());
      assertTrue(person0.isFemale());
      assertEquals(0, person0.getId());
      
      boolean boolean0 = person0.isFemale();
      assertEquals("female", person0.getGender());
      assertEquals("", person0.getLastName());
      assertEquals(1, person0.getGenderAsInt());
      assertEquals("", person0.getFirstName());
      assertTrue(person0.isFemale());
      assertEquals(0, person0.getId());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Person person0 = Person.restorePerson(0, "", "", true);
      //  // Unstable assertion: assertNotNull(person0);
      //  // Unstable assertion: assertEquals(0, person0.getId());
      //  // Unstable assertion: assertEquals("", person0.getLastName());
      //  // Unstable assertion: assertEquals("", person0.getFirstName());
      //  // Unstable assertion: assertEquals("female", person0.getGender());
      //  // Unstable assertion: assertTrue(person0.isFemale());
      //  // Unstable assertion: assertEquals(1, person0.getGenderAsInt());
      
      Person person1 = new Person("", "", true);
      //  // Unstable assertion: assertNotNull(person1);
      //  // Unstable assertion: assertEquals("", person1.getFirstName());
      //  // Unstable assertion: assertEquals(1, person1.getGenderAsInt());
      //  // Unstable assertion: assertEquals("", person1.getLastName());
      //  // Unstable assertion: assertEquals(37, person1.getId());
      //  // Unstable assertion: assertTrue(person1.isFemale());
      //  // Unstable assertion: assertEquals("female", person1.getGender());
      //  // Unstable assertion: assertFalse(person1.equals((Object)person0));
      
      person0.addChild(person1);
      //  // Unstable assertion: assertEquals(0, person0.getId());
      //  // Unstable assertion: assertEquals("", person0.getLastName());
      //  // Unstable assertion: assertEquals("", person0.getFirstName());
      //  // Unstable assertion: assertEquals("female", person0.getGender());
      //  // Unstable assertion: assertTrue(person0.isFemale());
      //  // Unstable assertion: assertEquals(1, person0.getGenderAsInt());
      //  // Unstable assertion: assertEquals("", person1.getFirstName());
      //  // Unstable assertion: assertEquals(1, person1.getGenderAsInt());
      //  // Unstable assertion: assertEquals("", person1.getLastName());
      //  // Unstable assertion: assertEquals(37, person1.getId());
      //  // Unstable assertion: assertTrue(person1.isFemale());
      //  // Unstable assertion: assertEquals("female", person1.getGender());
      //  // Unstable assertion: assertNotSame(person0, person1);
      //  // Unstable assertion: assertNotSame(person1, person0);
      //  // Unstable assertion: assertFalse(person0.equals((Object)person1));
      //  // Unstable assertion: assertFalse(person1.equals((Object)person0));
      
      Vector vector0 = person1.getRelationships();
      //  // Unstable assertion: assertNotNull(vector0);
      //  // Unstable assertion: assertEquals("", person1.getFirstName());
      //  // Unstable assertion: assertEquals(1, person1.getGenderAsInt());
      //  // Unstable assertion: assertEquals("", person1.getLastName());
      //  // Unstable assertion: assertEquals(37, person1.getId());
      //  // Unstable assertion: assertTrue(person1.isFemale());
      //  // Unstable assertion: assertEquals("female", person1.getGender());
      //  // Unstable assertion: assertEquals(1, vector0.size());
      //  // Unstable assertion: assertFalse(vector0.isEmpty());
      //  // Unstable assertion: assertEquals(10, vector0.capacity());
      //  // Unstable assertion: assertNotSame(person1, person0);
      //  // Unstable assertion: assertFalse(person1.equals((Object)person0));
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Person person0 = new Person((String) null, (String) null, false);
      //  // Unstable assertion: assertNotNull(person0);
      //  // Unstable assertion: assertEquals(0, person0.getGenderAsInt());
      //  // Unstable assertion: assertEquals("male", person0.getGender());
      //  // Unstable assertion: assertEquals(35, person0.getId());
      //  // Unstable assertion: assertFalse(person0.isFemale());
      //  // Unstable assertion: assertNull(person0.getFirstName());
      //  // Unstable assertion: assertNull(person0.getLastName());
      
      String string0 = person0.getLastName();
      //  // Unstable assertion: assertNull(string0);
      //  // Unstable assertion: assertEquals(0, person0.getGenderAsInt());
      //  // Unstable assertion: assertEquals("male", person0.getGender());
      //  // Unstable assertion: assertEquals(35, person0.getId());
      //  // Unstable assertion: assertFalse(person0.isFemale());
      //  // Unstable assertion: assertNull(person0.getFirstName());
      //  // Unstable assertion: assertNull(person0.getLastName());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Person person0 = new Person((String) null, "N", false);
      //  // Unstable assertion: assertNotNull(person0);
      //  // Unstable assertion: assertEquals(0, person0.getGenderAsInt());
      //  // Unstable assertion: assertNull(person0.getFirstName());
      //  // Unstable assertion: assertFalse(person0.isFemale());
      //  // Unstable assertion: assertEquals("N", person0.getLastName());
      //  // Unstable assertion: assertEquals(34, person0.getId());
      //  // Unstable assertion: assertEquals("male", person0.getGender());
      
      String string0 = person0.getLastName();
      //  // Unstable assertion: assertNotNull(string0);
      //  // Unstable assertion: assertEquals(0, person0.getGenderAsInt());
      //  // Unstable assertion: assertNull(person0.getFirstName());
      //  // Unstable assertion: assertFalse(person0.isFemale());
      //  // Unstable assertion: assertEquals("N", person0.getLastName());
      //  // Unstable assertion: assertEquals(34, person0.getId());
      //  // Unstable assertion: assertEquals("male", person0.getGender());
      //  // Unstable assertion: assertEquals("N", string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Person person0 = Person.restorePerson(0, "", "", false);
      assertNotNull(person0);
      assertEquals(0, person0.getId());
      assertFalse(person0.isFemale());
      assertEquals("", person0.getFirstName());
      assertEquals(0, person0.getGenderAsInt());
      assertEquals("male", person0.getGender());
      assertEquals("", person0.getLastName());
      
      int int0 = person0.getId();
      assertEquals(0, person0.getId());
      assertFalse(person0.isFemale());
      assertEquals("", person0.getFirstName());
      assertEquals(0, person0.getGenderAsInt());
      assertEquals("male", person0.getGender());
      assertEquals("", person0.getLastName());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Person person0 = Person.restorePerson((-1), "", "", true);
      assertNotNull(person0);
      assertEquals("", person0.getFirstName());
      assertEquals((-1), person0.getId());
      assertTrue(person0.isFemale());
      assertEquals("female", person0.getGender());
      assertEquals("", person0.getLastName());
      assertEquals(1, person0.getGenderAsInt());
      
      int int0 = person0.getId();
      assertEquals("", person0.getFirstName());
      assertEquals((-1), person0.getId());
      assertTrue(person0.isFemale());
      assertEquals("female", person0.getGender());
      assertEquals("", person0.getLastName());
      assertEquals(1, person0.getGenderAsInt());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Person person0 = Person.restorePerson(0, (String) null, "", true);
      assertNotNull(person0);
      assertEquals("", person0.getLastName());
      assertEquals("female", person0.getGender());
      assertTrue(person0.isFemale());
      assertEquals(1, person0.getGenderAsInt());
      assertEquals(0, person0.getId());
      assertNull(person0.getFirstName());
      
      String string0 = person0.getFirstName();
      assertNull(string0);
      assertEquals("", person0.getLastName());
      assertEquals("female", person0.getGender());
      assertTrue(person0.isFemale());
      assertEquals(1, person0.getGenderAsInt());
      assertEquals(0, person0.getId());
      assertNull(person0.getFirstName());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Person person0 = Person.restorePerson(0, "A", "", true);
      assertNotNull(person0);
      assertTrue(person0.isFemale());
      assertEquals(1, person0.getGenderAsInt());
      assertEquals("female", person0.getGender());
      assertEquals("A", person0.getFirstName());
      assertEquals("", person0.getLastName());
      assertEquals(0, person0.getId());
      
      String string0 = person0.getFirstName();
      assertNotNull(string0);
      assertTrue(person0.isFemale());
      assertEquals(1, person0.getGenderAsInt());
      assertEquals("female", person0.getGender());
      assertEquals("A", person0.getFirstName());
      assertEquals("", person0.getLastName());
      assertEquals(0, person0.getId());
      assertEquals("A", string0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Person person0 = Person.restorePerson(0, "", (String) null, false);
      //  // Unstable assertion: assertNotNull(person0);
      //  // Unstable assertion: assertEquals(0, person0.getGenderAsInt());
      //  // Unstable assertion: assertNull(person0.getLastName());
      //  // Unstable assertion: assertFalse(person0.isFemale());
      //  // Unstable assertion: assertEquals("", person0.getFirstName());
      //  // Unstable assertion: assertEquals(0, person0.getId());
      //  // Unstable assertion: assertEquals("male", person0.getGender());
      
      TimeZone timeZone0 = TimeZone.getTimeZone("");
      //  // Unstable assertion: assertNotNull(timeZone0);
      //  // Unstable assertion: assertEquals("GMT", timeZone0.getID());
      
      Locale locale0 = Locale.ITALY;
      //  // Unstable assertion: assertNotNull(locale0);
      //  // Unstable assertion: assertEquals("", locale0.getVariant());
      //  // Unstable assertion: assertEquals("it", locale0.getLanguage());
      //  // Unstable assertion: assertEquals("it_IT", locale0.toString());
      //  // Unstable assertion: assertEquals("IT", locale0.getCountry());
      //  // Unstable assertion: assertEquals("ITA", locale0.getISO3Country());
      //  // Unstable assertion: assertEquals("ita", locale0.getISO3Language());
      
      GregorianCalendar gregorianCalendar0 = new GregorianCalendar(timeZone0, locale0);
      //  // Unstable assertion: assertNotNull(gregorianCalendar0);
      //  // Unstable assertion: assertEquals("GMT", timeZone0.getID());
      //  // Unstable assertion: assertEquals("", locale0.getVariant());
      //  // Unstable assertion: assertEquals("it", locale0.getLanguage());
      //  // Unstable assertion: assertEquals("it_IT", locale0.toString());
      //  // Unstable assertion: assertEquals("IT", locale0.getCountry());
      //  // Unstable assertion: assertEquals("ITA", locale0.getISO3Country());
      //  // Unstable assertion: assertEquals("ita", locale0.getISO3Language());
      //  // Unstable assertion: assertEquals("java.util.GregorianCalendar[time=1570056656515,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2019,MONTH=9,WEEK_OF_YEAR=40,WEEK_OF_MONTH=1,DAY_OF_MONTH=2,DAY_OF_YEAR=275,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=1,AM_PM=1,HOUR=10,HOUR_OF_DAY=22,MINUTE=50,SECOND=56,MILLISECOND=515,ZONE_OFFSET=0,DST_OFFSET=0]", gregorianCalendar0.toString());
      //  // Unstable assertion: assertEquals(2, gregorianCalendar0.getFirstDayOfWeek());
      //  // Unstable assertion: assertEquals(4, gregorianCalendar0.getMinimalDaysInFirstWeek());
      //  // Unstable assertion: assertTrue(gregorianCalendar0.isLenient());
      
      person0.setDateOfDeath(gregorianCalendar0);
      //  // Unstable assertion: assertEquals(0, person0.getGenderAsInt());
      //  // Unstable assertion: assertNull(person0.getLastName());
      //  // Unstable assertion: assertFalse(person0.isFemale());
      //  // Unstable assertion: assertEquals("", person0.getFirstName());
      //  // Unstable assertion: assertEquals(0, person0.getId());
      //  // Unstable assertion: assertEquals("male", person0.getGender());
      //  // Unstable assertion: assertEquals("GMT", timeZone0.getID());
      //  // Unstable assertion: assertEquals("", locale0.getVariant());
      //  // Unstable assertion: assertEquals("it", locale0.getLanguage());
      //  // Unstable assertion: assertEquals("it_IT", locale0.toString());
      //  // Unstable assertion: assertEquals("IT", locale0.getCountry());
      //  // Unstable assertion: assertEquals("ITA", locale0.getISO3Country());
      //  // Unstable assertion: assertEquals("ita", locale0.getISO3Language());
      //  // Unstable assertion: assertEquals("java.util.GregorianCalendar[time=1570056656515,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2019,MONTH=9,WEEK_OF_YEAR=40,WEEK_OF_MONTH=1,DAY_OF_MONTH=2,DAY_OF_YEAR=275,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=1,AM_PM=1,HOUR=10,HOUR_OF_DAY=22,MINUTE=50,SECOND=56,MILLISECOND=515,ZONE_OFFSET=0,DST_OFFSET=0]", gregorianCalendar0.toString());
      //  // Unstable assertion: assertEquals(2, gregorianCalendar0.getFirstDayOfWeek());
      //  // Unstable assertion: assertEquals(4, gregorianCalendar0.getMinimalDaysInFirstWeek());
      //  // Unstable assertion: assertTrue(gregorianCalendar0.isLenient());
      
      gregorianCalendar0.setLenient(false);
      //  // Unstable assertion: assertEquals("GMT", timeZone0.getID());
      //  // Unstable assertion: assertEquals("", locale0.getVariant());
      //  // Unstable assertion: assertEquals("it", locale0.getLanguage());
      //  // Unstable assertion: assertEquals("it_IT", locale0.toString());
      //  // Unstable assertion: assertEquals("IT", locale0.getCountry());
      //  // Unstable assertion: assertEquals("ITA", locale0.getISO3Country());
      //  // Unstable assertion: assertEquals("ita", locale0.getISO3Language());
      //  // Unstable assertion: assertEquals("java.util.GregorianCalendar[time=1570056656515,areFieldsSet=true,areAllFieldsSet=true,lenient=false,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2019,MONTH=9,WEEK_OF_YEAR=40,WEEK_OF_MONTH=1,DAY_OF_MONTH=2,DAY_OF_YEAR=275,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=1,AM_PM=1,HOUR=10,HOUR_OF_DAY=22,MINUTE=50,SECOND=56,MILLISECOND=515,ZONE_OFFSET=0,DST_OFFSET=0]", gregorianCalendar0.toString());
      //  // Unstable assertion: assertFalse(gregorianCalendar0.isLenient());
      //  // Unstable assertion: assertEquals(2, gregorianCalendar0.getFirstDayOfWeek());
      //  // Unstable assertion: assertEquals(4, gregorianCalendar0.getMinimalDaysInFirstWeek());
      
      GregorianCalendar gregorianCalendar1 = person0.getDateOfDeath();
      //  // Unstable assertion: assertNotNull(gregorianCalendar1);
      //  // Unstable assertion: assertEquals(0, person0.getGenderAsInt());
      //  // Unstable assertion: assertNull(person0.getLastName());
      //  // Unstable assertion: assertFalse(person0.isFemale());
      //  // Unstable assertion: assertEquals("", person0.getFirstName());
      //  // Unstable assertion: assertEquals(0, person0.getId());
      //  // Unstable assertion: assertEquals("male", person0.getGender());
      //  // Unstable assertion: assertEquals(2, gregorianCalendar1.getFirstDayOfWeek());
      //  // Unstable assertion: assertEquals("java.util.GregorianCalendar[time=1570056656515,areFieldsSet=true,areAllFieldsSet=true,lenient=false,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2019,MONTH=9,WEEK_OF_YEAR=40,WEEK_OF_MONTH=1,DAY_OF_MONTH=2,DAY_OF_YEAR=275,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=1,AM_PM=1,HOUR=10,HOUR_OF_DAY=22,MINUTE=50,SECOND=56,MILLISECOND=515,ZONE_OFFSET=0,DST_OFFSET=0]", gregorianCalendar1.toString());
      //  // Unstable assertion: assertEquals(4, gregorianCalendar1.getMinimalDaysInFirstWeek());
      //  // Unstable assertion: assertFalse(gregorianCalendar1.isLenient());
      //  // Unstable assertion: assertNotSame(gregorianCalendar1, gregorianCalendar0);
      //  // Unstable assertion: assertTrue(gregorianCalendar1.equals((Object)gregorianCalendar0));
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Person person0 = Person.restorePerson(0, "", (String) null, false);
      //  // Unstable assertion: assertNotNull(person0);
      //  // Unstable assertion: assertEquals(0, person0.getId());
      //  // Unstable assertion: assertNull(person0.getLastName());
      //  // Unstable assertion: assertEquals(0, person0.getGenderAsInt());
      //  // Unstable assertion: assertEquals("male", person0.getGender());
      //  // Unstable assertion: assertFalse(person0.isFemale());
      //  // Unstable assertion: assertEquals("", person0.getFirstName());
      
      TimeZone timeZone0 = TimeZone.getTimeZone("");
      //  // Unstable assertion: assertNotNull(timeZone0);
      //  // Unstable assertion: assertEquals("GMT", timeZone0.getID());
      
      Locale locale0 = Locale.ITALY;
      //  // Unstable assertion: assertNotNull(locale0);
      //  // Unstable assertion: assertEquals("", locale0.getVariant());
      //  // Unstable assertion: assertEquals("ITA", locale0.getISO3Country());
      //  // Unstable assertion: assertEquals("ita", locale0.getISO3Language());
      //  // Unstable assertion: assertEquals("it_IT", locale0.toString());
      //  // Unstable assertion: assertEquals("it", locale0.getLanguage());
      //  // Unstable assertion: assertEquals("IT", locale0.getCountry());
      
      GregorianCalendar gregorianCalendar0 = new GregorianCalendar(timeZone0, locale0);
      //  // Unstable assertion: assertNotNull(gregorianCalendar0);
      //  // Unstable assertion: assertEquals("GMT", timeZone0.getID());
      //  // Unstable assertion: assertEquals("", locale0.getVariant());
      //  // Unstable assertion: assertEquals("ITA", locale0.getISO3Country());
      //  // Unstable assertion: assertEquals("ita", locale0.getISO3Language());
      //  // Unstable assertion: assertEquals("it_IT", locale0.toString());
      //  // Unstable assertion: assertEquals("it", locale0.getLanguage());
      //  // Unstable assertion: assertEquals("IT", locale0.getCountry());
      //  // Unstable assertion: assertEquals(4, gregorianCalendar0.getMinimalDaysInFirstWeek());
      //  // Unstable assertion: assertEquals(2, gregorianCalendar0.getFirstDayOfWeek());
      //  // Unstable assertion: assertTrue(gregorianCalendar0.isLenient());
      //  // Unstable assertion: assertEquals("java.util.GregorianCalendar[time=1570056656433,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2019,MONTH=9,WEEK_OF_YEAR=40,WEEK_OF_MONTH=1,DAY_OF_MONTH=2,DAY_OF_YEAR=275,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=1,AM_PM=1,HOUR=10,HOUR_OF_DAY=22,MINUTE=50,SECOND=56,MILLISECOND=433,ZONE_OFFSET=0,DST_OFFSET=0]", gregorianCalendar0.toString());
      
      gregorianCalendar0.setMinimalDaysInFirstWeek(0);
      //  // Unstable assertion: assertEquals("GMT", timeZone0.getID());
      //  // Unstable assertion: assertEquals("", locale0.getVariant());
      //  // Unstable assertion: assertEquals("ITA", locale0.getISO3Country());
      //  // Unstable assertion: assertEquals("ita", locale0.getISO3Language());
      //  // Unstable assertion: assertEquals("it_IT", locale0.toString());
      //  // Unstable assertion: assertEquals("it", locale0.getLanguage());
      //  // Unstable assertion: assertEquals("IT", locale0.getCountry());
      //  // Unstable assertion: assertEquals(0, gregorianCalendar0.getMinimalDaysInFirstWeek());
      //  // Unstable assertion: assertEquals(2, gregorianCalendar0.getFirstDayOfWeek());
      //  // Unstable assertion: assertEquals("java.util.GregorianCalendar[time=1570056656433,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=0,ERA=1,YEAR=2019,MONTH=9,WEEK_OF_YEAR=40,WEEK_OF_MONTH=1,DAY_OF_MONTH=2,DAY_OF_YEAR=275,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=1,AM_PM=1,HOUR=10,HOUR_OF_DAY=22,MINUTE=50,SECOND=56,MILLISECOND=433,ZONE_OFFSET=0,DST_OFFSET=0]", gregorianCalendar0.toString());
      //  // Unstable assertion: assertTrue(gregorianCalendar0.isLenient());
      
      person0.setDateOfDeath(gregorianCalendar0);
      //  // Unstable assertion: assertEquals(0, person0.getId());
      //  // Unstable assertion: assertNull(person0.getLastName());
      //  // Unstable assertion: assertEquals(0, person0.getGenderAsInt());
      //  // Unstable assertion: assertEquals("male", person0.getGender());
      //  // Unstable assertion: assertFalse(person0.isFemale());
      //  // Unstable assertion: assertEquals("", person0.getFirstName());
      //  // Unstable assertion: assertEquals("GMT", timeZone0.getID());
      //  // Unstable assertion: assertEquals("", locale0.getVariant());
      //  // Unstable assertion: assertEquals("ITA", locale0.getISO3Country());
      //  // Unstable assertion: assertEquals("ita", locale0.getISO3Language());
      //  // Unstable assertion: assertEquals("it_IT", locale0.toString());
      //  // Unstable assertion: assertEquals("it", locale0.getLanguage());
      //  // Unstable assertion: assertEquals("IT", locale0.getCountry());
      //  // Unstable assertion: assertEquals(0, gregorianCalendar0.getMinimalDaysInFirstWeek());
      //  // Unstable assertion: assertEquals(2, gregorianCalendar0.getFirstDayOfWeek());
      //  // Unstable assertion: assertEquals("java.util.GregorianCalendar[time=1570056656433,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=0,ERA=1,YEAR=2019,MONTH=9,WEEK_OF_YEAR=40,WEEK_OF_MONTH=1,DAY_OF_MONTH=2,DAY_OF_YEAR=275,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=1,AM_PM=1,HOUR=10,HOUR_OF_DAY=22,MINUTE=50,SECOND=56,MILLISECOND=433,ZONE_OFFSET=0,DST_OFFSET=0]", gregorianCalendar0.toString());
      //  // Unstable assertion: assertTrue(gregorianCalendar0.isLenient());
      
      GregorianCalendar gregorianCalendar1 = person0.getDateOfDeath();
      //  // Unstable assertion: assertNotNull(gregorianCalendar1);
      //  // Unstable assertion: assertEquals(0, person0.getId());
      //  // Unstable assertion: assertNull(person0.getLastName());
      //  // Unstable assertion: assertEquals(0, person0.getGenderAsInt());
      //  // Unstable assertion: assertEquals("male", person0.getGender());
      //  // Unstable assertion: assertFalse(person0.isFemale());
      //  // Unstable assertion: assertEquals("", person0.getFirstName());
      //  // Unstable assertion: assertEquals(0, gregorianCalendar1.getMinimalDaysInFirstWeek());
      //  // Unstable assertion: assertEquals(2, gregorianCalendar1.getFirstDayOfWeek());
      //  // Unstable assertion: assertEquals("java.util.GregorianCalendar[time=1570056656433,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=0,ERA=1,YEAR=2019,MONTH=9,WEEK_OF_YEAR=40,WEEK_OF_MONTH=1,DAY_OF_MONTH=2,DAY_OF_YEAR=275,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=1,AM_PM=1,HOUR=10,HOUR_OF_DAY=22,MINUTE=50,SECOND=56,MILLISECOND=433,ZONE_OFFSET=0,DST_OFFSET=0]", gregorianCalendar1.toString());
      //  // Unstable assertion: assertTrue(gregorianCalendar1.isLenient());
      //  // Unstable assertion: assertNotSame(gregorianCalendar1, gregorianCalendar0);
      //  // Unstable assertion: assertTrue(gregorianCalendar1.equals((Object)gregorianCalendar0));
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Person person0 = Person.restorePerson(0, "", "", true);
      assertNotNull(person0);
      assertEquals(0, person0.getId());
      assertEquals("", person0.getLastName());
      assertEquals("female", person0.getGender());
      assertEquals(1, person0.getGenderAsInt());
      assertTrue(person0.isFemale());
      assertEquals("", person0.getFirstName());
      
      GregorianCalendar gregorianCalendar0 = person0.getDateOfBirth();
      assertNotNull(gregorianCalendar0);
      assertEquals(0, person0.getId());
      assertEquals("", person0.getLastName());
      assertEquals("female", person0.getGender());
      assertEquals(1, person0.getGenderAsInt());
      assertTrue(person0.isFemale());
      assertEquals("", person0.getFirstName());
      assertEquals("java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=?,YEAR=?,MONTH=?,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=?,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=?,HOUR=?,HOUR_OF_DAY=?,MINUTE=?,SECOND=?,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", gregorianCalendar0.toString());
      assertEquals(2, gregorianCalendar0.getFirstDayOfWeek());
      assertTrue(gregorianCalendar0.isLenient());
      assertEquals(4, gregorianCalendar0.getMinimalDaysInFirstWeek());
      
      gregorianCalendar0.setFirstDayOfWeek(0);
      assertEquals(0, person0.getId());
      assertEquals("", person0.getLastName());
      assertEquals("female", person0.getGender());
      assertEquals(1, person0.getGenderAsInt());
      assertTrue(person0.isFemale());
      assertEquals("", person0.getFirstName());
      assertEquals(0, gregorianCalendar0.getFirstDayOfWeek());
      assertEquals("java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=0,minimalDaysInFirstWeek=4,ERA=?,YEAR=?,MONTH=?,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=?,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=?,HOUR=?,HOUR_OF_DAY=?,MINUTE=?,SECOND=?,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", gregorianCalendar0.toString());
      assertTrue(gregorianCalendar0.isLenient());
      assertEquals(4, gregorianCalendar0.getMinimalDaysInFirstWeek());
      
      person0.setDateOfDeath(gregorianCalendar0);
      assertEquals(0, person0.getId());
      assertEquals("", person0.getLastName());
      assertEquals("female", person0.getGender());
      assertEquals(1, person0.getGenderAsInt());
      assertTrue(person0.isFemale());
      assertEquals("", person0.getFirstName());
      assertEquals(0, gregorianCalendar0.getFirstDayOfWeek());
      assertEquals("java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=0,minimalDaysInFirstWeek=4,ERA=?,YEAR=?,MONTH=?,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=?,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=?,HOUR=?,HOUR_OF_DAY=?,MINUTE=?,SECOND=?,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", gregorianCalendar0.toString());
      assertTrue(gregorianCalendar0.isLenient());
      assertEquals(4, gregorianCalendar0.getMinimalDaysInFirstWeek());
      
      GregorianCalendar gregorianCalendar1 = person0.getDateOfDeath();
      assertNotNull(gregorianCalendar1);
      assertEquals(0, person0.getId());
      assertEquals("", person0.getLastName());
      assertEquals("female", person0.getGender());
      assertEquals(1, person0.getGenderAsInt());
      assertTrue(person0.isFemale());
      assertEquals("", person0.getFirstName());
      assertTrue(gregorianCalendar1.isLenient());
      assertEquals(0, gregorianCalendar1.getFirstDayOfWeek());
      assertEquals("java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=0,minimalDaysInFirstWeek=4,ERA=?,YEAR=?,MONTH=?,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=?,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=?,HOUR=?,HOUR_OF_DAY=?,MINUTE=?,SECOND=?,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", gregorianCalendar1.toString());
      assertEquals(4, gregorianCalendar1.getMinimalDaysInFirstWeek());
      assertNotSame(gregorianCalendar1, gregorianCalendar0);
      assertTrue(gregorianCalendar1.equals((Object)gregorianCalendar0));
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Person person0 = Person.restorePerson(0, (String) null, "", true);
      assertNotNull(person0);
      assertEquals("", person0.getLastName());
      assertEquals("female", person0.getGender());
      assertEquals(1, person0.getGenderAsInt());
      assertTrue(person0.isFemale());
      assertNull(person0.getFirstName());
      assertEquals(0, person0.getId());
      
      GregorianCalendar gregorianCalendar0 = person0.getDateOfBirth();
      assertNotNull(gregorianCalendar0);
      assertEquals("", person0.getLastName());
      assertEquals("female", person0.getGender());
      assertEquals(1, person0.getGenderAsInt());
      assertTrue(person0.isFemale());
      assertNull(person0.getFirstName());
      assertEquals(0, person0.getId());
      assertEquals("java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=?,YEAR=?,MONTH=?,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=?,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=?,HOUR=?,HOUR_OF_DAY=?,MINUTE=?,SECOND=?,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", gregorianCalendar0.toString());
      assertEquals(4, gregorianCalendar0.getMinimalDaysInFirstWeek());
      assertTrue(gregorianCalendar0.isLenient());
      assertEquals(2, gregorianCalendar0.getFirstDayOfWeek());
      
      gregorianCalendar0.setFirstDayOfWeek((-1));
      assertEquals("", person0.getLastName());
      assertEquals("female", person0.getGender());
      assertEquals(1, person0.getGenderAsInt());
      assertTrue(person0.isFemale());
      assertNull(person0.getFirstName());
      assertEquals(0, person0.getId());
      assertEquals("java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=-1,minimalDaysInFirstWeek=4,ERA=?,YEAR=?,MONTH=?,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=?,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=?,HOUR=?,HOUR_OF_DAY=?,MINUTE=?,SECOND=?,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", gregorianCalendar0.toString());
      assertEquals(4, gregorianCalendar0.getMinimalDaysInFirstWeek());
      assertTrue(gregorianCalendar0.isLenient());
      assertEquals((-1), gregorianCalendar0.getFirstDayOfWeek());
      
      person0.setDateOfDeath(gregorianCalendar0);
      assertEquals("", person0.getLastName());
      assertEquals("female", person0.getGender());
      assertEquals(1, person0.getGenderAsInt());
      assertTrue(person0.isFemale());
      assertNull(person0.getFirstName());
      assertEquals(0, person0.getId());
      assertEquals("java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=-1,minimalDaysInFirstWeek=4,ERA=?,YEAR=?,MONTH=?,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=?,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=?,HOUR=?,HOUR_OF_DAY=?,MINUTE=?,SECOND=?,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", gregorianCalendar0.toString());
      assertEquals(4, gregorianCalendar0.getMinimalDaysInFirstWeek());
      assertTrue(gregorianCalendar0.isLenient());
      assertEquals((-1), gregorianCalendar0.getFirstDayOfWeek());
      
      GregorianCalendar gregorianCalendar1 = person0.getDateOfDeath();
      assertNotNull(gregorianCalendar1);
      assertEquals("", person0.getLastName());
      assertEquals("female", person0.getGender());
      assertEquals(1, person0.getGenderAsInt());
      assertTrue(person0.isFemale());
      assertNull(person0.getFirstName());
      assertEquals(0, person0.getId());
      assertEquals((-1), gregorianCalendar1.getFirstDayOfWeek());
      assertEquals(4, gregorianCalendar1.getMinimalDaysInFirstWeek());
      assertEquals("java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=-1,minimalDaysInFirstWeek=4,ERA=?,YEAR=?,MONTH=?,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=?,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=?,HOUR=?,HOUR_OF_DAY=?,MINUTE=?,SECOND=?,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", gregorianCalendar1.toString());
      assertTrue(gregorianCalendar1.isLenient());
      assertNotSame(gregorianCalendar1, gregorianCalendar0);
      assertTrue(gregorianCalendar1.equals((Object)gregorianCalendar0));
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Person person0 = Person.restorePerson(0, "", "", false);
      assertNotNull(person0);
      assertEquals(0, person0.getGenderAsInt());
      assertEquals("male", person0.getGender());
      assertEquals("", person0.getFirstName());
      assertEquals("", person0.getLastName());
      assertFalse(person0.isFemale());
      assertEquals(0, person0.getId());
      
      GregorianCalendar gregorianCalendar0 = person0.getDateOfBirth();
      assertNotNull(gregorianCalendar0);
      assertEquals(0, person0.getGenderAsInt());
      assertEquals("male", person0.getGender());
      assertEquals("", person0.getFirstName());
      assertEquals("", person0.getLastName());
      assertFalse(person0.isFemale());
      assertEquals(0, person0.getId());
      assertEquals(4, gregorianCalendar0.getMinimalDaysInFirstWeek());
      assertTrue(gregorianCalendar0.isLenient());
      assertEquals(2, gregorianCalendar0.getFirstDayOfWeek());
      assertEquals("java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=?,YEAR=?,MONTH=?,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=?,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=?,HOUR=?,HOUR_OF_DAY=?,MINUTE=?,SECOND=?,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", gregorianCalendar0.toString());
      
      gregorianCalendar0.setLenient(false);
      assertEquals(0, person0.getGenderAsInt());
      assertEquals("male", person0.getGender());
      assertEquals("", person0.getFirstName());
      assertEquals("", person0.getLastName());
      assertFalse(person0.isFemale());
      assertEquals(0, person0.getId());
      assertEquals(4, gregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals(2, gregorianCalendar0.getFirstDayOfWeek());
      assertEquals("java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=false,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=?,YEAR=?,MONTH=?,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=?,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=?,HOUR=?,HOUR_OF_DAY=?,MINUTE=?,SECOND=?,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", gregorianCalendar0.toString());
      assertFalse(gregorianCalendar0.isLenient());
      
      person0.setDateOfBirth(gregorianCalendar0);
      assertEquals(0, person0.getGenderAsInt());
      assertEquals("male", person0.getGender());
      assertEquals("", person0.getFirstName());
      assertEquals("", person0.getLastName());
      assertFalse(person0.isFemale());
      assertEquals(0, person0.getId());
      assertEquals(4, gregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals(2, gregorianCalendar0.getFirstDayOfWeek());
      assertEquals("java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=false,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=?,YEAR=?,MONTH=?,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=?,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=?,HOUR=?,HOUR_OF_DAY=?,MINUTE=?,SECOND=?,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", gregorianCalendar0.toString());
      assertFalse(gregorianCalendar0.isLenient());
      
      GregorianCalendar gregorianCalendar1 = person0.getDateOfBirth();
      assertNotNull(gregorianCalendar1);
      assertEquals(0, person0.getGenderAsInt());
      assertEquals("male", person0.getGender());
      assertEquals("", person0.getFirstName());
      assertEquals("", person0.getLastName());
      assertFalse(person0.isFemale());
      assertEquals(0, person0.getId());
      assertEquals(4, gregorianCalendar1.getMinimalDaysInFirstWeek());
      assertFalse(gregorianCalendar1.isLenient());
      assertEquals(2, gregorianCalendar1.getFirstDayOfWeek());
      assertEquals("java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=false,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=?,YEAR=?,MONTH=?,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=?,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=?,HOUR=?,HOUR_OF_DAY=?,MINUTE=?,SECOND=?,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", gregorianCalendar1.toString());
      assertNotSame(gregorianCalendar1, gregorianCalendar0);
      assertTrue(gregorianCalendar1.equals((Object)gregorianCalendar0));
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Person person0 = Person.restorePerson(0, "", "", false);
      assertNotNull(person0);
      assertEquals("", person0.getLastName());
      assertEquals("", person0.getFirstName());
      assertEquals("male", person0.getGender());
      assertEquals(0, person0.getGenderAsInt());
      assertFalse(person0.isFemale());
      assertEquals(0, person0.getId());
      
      GregorianCalendar gregorianCalendar0 = person0.getDateOfDeath();
      assertNotNull(gregorianCalendar0);
      assertEquals("", person0.getLastName());
      assertEquals("", person0.getFirstName());
      assertEquals("male", person0.getGender());
      assertEquals(0, person0.getGenderAsInt());
      assertFalse(person0.isFemale());
      assertEquals(0, person0.getId());
      assertEquals(4, gregorianCalendar0.getMinimalDaysInFirstWeek());
      assertTrue(gregorianCalendar0.isLenient());
      assertEquals("java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=?,YEAR=?,MONTH=?,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=?,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=?,HOUR=?,HOUR_OF_DAY=?,MINUTE=?,SECOND=?,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", gregorianCalendar0.toString());
      assertEquals(2, gregorianCalendar0.getFirstDayOfWeek());
      
      gregorianCalendar0.setMinimalDaysInFirstWeek(0);
      assertEquals("", person0.getLastName());
      assertEquals("", person0.getFirstName());
      assertEquals("male", person0.getGender());
      assertEquals(0, person0.getGenderAsInt());
      assertFalse(person0.isFemale());
      assertEquals(0, person0.getId());
      assertTrue(gregorianCalendar0.isLenient());
      assertEquals(0, gregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals("java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=0,ERA=?,YEAR=?,MONTH=?,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=?,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=?,HOUR=?,HOUR_OF_DAY=?,MINUTE=?,SECOND=?,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", gregorianCalendar0.toString());
      assertEquals(2, gregorianCalendar0.getFirstDayOfWeek());
      
      person0.setDateOfBirth(gregorianCalendar0);
      assertEquals("", person0.getLastName());
      assertEquals("", person0.getFirstName());
      assertEquals("male", person0.getGender());
      assertEquals(0, person0.getGenderAsInt());
      assertFalse(person0.isFemale());
      assertEquals(0, person0.getId());
      assertTrue(gregorianCalendar0.isLenient());
      assertEquals(0, gregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals("java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=0,ERA=?,YEAR=?,MONTH=?,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=?,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=?,HOUR=?,HOUR_OF_DAY=?,MINUTE=?,SECOND=?,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", gregorianCalendar0.toString());
      assertEquals(2, gregorianCalendar0.getFirstDayOfWeek());
      
      GregorianCalendar gregorianCalendar1 = person0.getDateOfBirth();
      assertNotNull(gregorianCalendar1);
      assertEquals("", person0.getLastName());
      assertEquals("", person0.getFirstName());
      assertEquals("male", person0.getGender());
      assertEquals(0, person0.getGenderAsInt());
      assertFalse(person0.isFemale());
      assertEquals(0, person0.getId());
      assertEquals("java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=0,ERA=?,YEAR=?,MONTH=?,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=?,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=?,HOUR=?,HOUR_OF_DAY=?,MINUTE=?,SECOND=?,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", gregorianCalendar1.toString());
      assertEquals(0, gregorianCalendar1.getMinimalDaysInFirstWeek());
      assertEquals(2, gregorianCalendar1.getFirstDayOfWeek());
      assertTrue(gregorianCalendar1.isLenient());
      assertNotSame(gregorianCalendar1, gregorianCalendar0);
      assertTrue(gregorianCalendar1.equals((Object)gregorianCalendar0));
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Person person0 = Person.restorePerson(0, "", "", false);
      assertNotNull(person0);
      assertEquals(0, person0.getId());
      assertEquals("male", person0.getGender());
      assertFalse(person0.isFemale());
      assertEquals("", person0.getFirstName());
      assertEquals(0, person0.getGenderAsInt());
      assertEquals("", person0.getLastName());
      
      GregorianCalendar gregorianCalendar0 = new GregorianCalendar(0, 0, 0);
      assertNotNull(gregorianCalendar0);
      assertEquals("java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=?,YEAR=0,MONTH=0,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=0,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", gregorianCalendar0.toString());
      assertEquals(2, gregorianCalendar0.getFirstDayOfWeek());
      assertEquals(4, gregorianCalendar0.getMinimalDaysInFirstWeek());
      assertTrue(gregorianCalendar0.isLenient());
      
      person0.setDateOfBirth(gregorianCalendar0);
      assertEquals(0, person0.getId());
      assertEquals("male", person0.getGender());
      assertFalse(person0.isFemale());
      assertEquals("", person0.getFirstName());
      assertEquals(0, person0.getGenderAsInt());
      assertEquals("", person0.getLastName());
      assertEquals("java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=?,YEAR=0,MONTH=0,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=0,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", gregorianCalendar0.toString());
      assertEquals(2, gregorianCalendar0.getFirstDayOfWeek());
      assertEquals(4, gregorianCalendar0.getMinimalDaysInFirstWeek());
      assertTrue(gregorianCalendar0.isLenient());
      
      gregorianCalendar0.setFirstDayOfWeek(0);
      assertEquals(0, gregorianCalendar0.getFirstDayOfWeek());
      assertEquals("java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=0,minimalDaysInFirstWeek=4,ERA=?,YEAR=0,MONTH=0,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=0,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", gregorianCalendar0.toString());
      assertEquals(4, gregorianCalendar0.getMinimalDaysInFirstWeek());
      assertTrue(gregorianCalendar0.isLenient());
      
      GregorianCalendar gregorianCalendar1 = person0.getDateOfBirth();
      assertNotNull(gregorianCalendar1);
      assertEquals(0, person0.getId());
      assertEquals("male", person0.getGender());
      assertFalse(person0.isFemale());
      assertEquals("", person0.getFirstName());
      assertEquals(0, person0.getGenderAsInt());
      assertEquals("", person0.getLastName());
      assertEquals(4, gregorianCalendar1.getMinimalDaysInFirstWeek());
      assertEquals("java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=0,minimalDaysInFirstWeek=4,ERA=?,YEAR=0,MONTH=0,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=0,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", gregorianCalendar1.toString());
      assertEquals(0, gregorianCalendar1.getFirstDayOfWeek());
      assertTrue(gregorianCalendar1.isLenient());
      assertNotSame(gregorianCalendar1, gregorianCalendar0);
      assertTrue(gregorianCalendar1.equals((Object)gregorianCalendar0));
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Person person0 = Person.restorePerson(0, "", "", false);
      assertNotNull(person0);
      assertEquals(0, person0.getGenderAsInt());
      assertEquals("", person0.getFirstName());
      assertFalse(person0.isFemale());
      assertEquals("", person0.getLastName());
      assertEquals(0, person0.getId());
      assertEquals("male", person0.getGender());
      
      GregorianCalendar gregorianCalendar0 = person0.getDateOfDeath();
      assertNotNull(gregorianCalendar0);
      assertEquals(0, person0.getGenderAsInt());
      assertEquals("", person0.getFirstName());
      assertFalse(person0.isFemale());
      assertEquals("", person0.getLastName());
      assertEquals(0, person0.getId());
      assertEquals("male", person0.getGender());
      assertEquals("java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=?,YEAR=?,MONTH=?,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=?,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=?,HOUR=?,HOUR_OF_DAY=?,MINUTE=?,SECOND=?,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", gregorianCalendar0.toString());
      assertTrue(gregorianCalendar0.isLenient());
      assertEquals(2, gregorianCalendar0.getFirstDayOfWeek());
      assertEquals(4, gregorianCalendar0.getMinimalDaysInFirstWeek());
      
      gregorianCalendar0.setFirstDayOfWeek((-1));
      assertEquals(0, person0.getGenderAsInt());
      assertEquals("", person0.getFirstName());
      assertFalse(person0.isFemale());
      assertEquals("", person0.getLastName());
      assertEquals(0, person0.getId());
      assertEquals("male", person0.getGender());
      assertEquals((-1), gregorianCalendar0.getFirstDayOfWeek());
      assertTrue(gregorianCalendar0.isLenient());
      assertEquals("java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=-1,minimalDaysInFirstWeek=4,ERA=?,YEAR=?,MONTH=?,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=?,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=?,HOUR=?,HOUR_OF_DAY=?,MINUTE=?,SECOND=?,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", gregorianCalendar0.toString());
      assertEquals(4, gregorianCalendar0.getMinimalDaysInFirstWeek());
      
      person0.setDateOfBirth(gregorianCalendar0);
      assertEquals(0, person0.getGenderAsInt());
      assertEquals("", person0.getFirstName());
      assertFalse(person0.isFemale());
      assertEquals("", person0.getLastName());
      assertEquals(0, person0.getId());
      assertEquals("male", person0.getGender());
      assertEquals((-1), gregorianCalendar0.getFirstDayOfWeek());
      assertTrue(gregorianCalendar0.isLenient());
      assertEquals("java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=-1,minimalDaysInFirstWeek=4,ERA=?,YEAR=?,MONTH=?,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=?,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=?,HOUR=?,HOUR_OF_DAY=?,MINUTE=?,SECOND=?,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", gregorianCalendar0.toString());
      assertEquals(4, gregorianCalendar0.getMinimalDaysInFirstWeek());
      
      GregorianCalendar gregorianCalendar1 = person0.getDateOfBirth();
      assertNotNull(gregorianCalendar1);
      assertEquals(0, person0.getGenderAsInt());
      assertEquals("", person0.getFirstName());
      assertFalse(person0.isFemale());
      assertEquals("", person0.getLastName());
      assertEquals(0, person0.getId());
      assertEquals("male", person0.getGender());
      assertEquals("java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=-1,minimalDaysInFirstWeek=4,ERA=?,YEAR=?,MONTH=?,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=?,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=?,HOUR=?,HOUR_OF_DAY=?,MINUTE=?,SECOND=?,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", gregorianCalendar1.toString());
      assertEquals((-1), gregorianCalendar1.getFirstDayOfWeek());
      assertEquals(4, gregorianCalendar1.getMinimalDaysInFirstWeek());
      assertTrue(gregorianCalendar1.isLenient());
      assertNotSame(gregorianCalendar1, gregorianCalendar0);
      assertTrue(gregorianCalendar1.equals((Object)gregorianCalendar0));
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Person person0 = new Person("", "", false);
      //  // Unstable assertion: assertNotNull(person0);
      //  // Unstable assertion: assertEquals("", person0.getFirstName());
      //  // Unstable assertion: assertEquals(21, person0.getId());
      //  // Unstable assertion: assertEquals("", person0.getLastName());
      //  // Unstable assertion: assertEquals("male", person0.getGender());
      //  // Unstable assertion: assertFalse(person0.isFemale());
      //  // Unstable assertion: assertEquals(0, person0.getGenderAsInt());
      
      person0.setDateOfDeath((GregorianCalendar) null);
      //  // Unstable assertion: assertEquals("", person0.getFirstName());
      //  // Unstable assertion: assertEquals(21, person0.getId());
      //  // Unstable assertion: assertEquals("", person0.getLastName());
      //  // Unstable assertion: assertEquals("male", person0.getGender());
      //  // Unstable assertion: assertFalse(person0.isFemale());
      //  // Unstable assertion: assertEquals(0, person0.getGenderAsInt());
      
      // Undeclared exception!
      try { 
        person0.getDateOfDeath();
       //  fail("Expecting exception: NullPointerException");
       // Unstable assertion
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("familytree.model.Person", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Person person0 = Person.restorePerson(0, "", "", true);
      assertNotNull(person0);
      assertEquals(1, person0.getGenderAsInt());
      assertEquals("", person0.getLastName());
      assertEquals("female", person0.getGender());
      assertEquals(0, person0.getId());
      assertEquals("", person0.getFirstName());
      assertTrue(person0.isFemale());
      
      person0.setDateOfBirth((GregorianCalendar) null);
      assertEquals(1, person0.getGenderAsInt());
      assertEquals("", person0.getLastName());
      assertEquals("female", person0.getGender());
      assertEquals(0, person0.getId());
      assertEquals("", person0.getFirstName());
      assertTrue(person0.isFemale());
      
      // Undeclared exception!
      try { 
        person0.getDateOfBirth();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("familytree.model.Person", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Person person0 = Person.restorePerson(0, "", "", true);
      assertNotNull(person0);
      assertEquals("female", person0.getGender());
      assertEquals(1, person0.getGenderAsInt());
      assertEquals("", person0.getLastName());
      assertEquals("", person0.getFirstName());
      assertEquals(0, person0.getId());
      assertTrue(person0.isFemale());
      
      GregorianCalendar gregorianCalendar0 = person0.getDateOfBirth();
      assertNotNull(gregorianCalendar0);
      assertEquals("female", person0.getGender());
      assertEquals(1, person0.getGenderAsInt());
      assertEquals("", person0.getLastName());
      assertEquals("", person0.getFirstName());
      assertEquals(0, person0.getId());
      assertTrue(person0.isFemale());
      assertEquals(2, gregorianCalendar0.getFirstDayOfWeek());
      assertEquals(4, gregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals("java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=?,YEAR=?,MONTH=?,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=?,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=?,HOUR=?,HOUR_OF_DAY=?,MINUTE=?,SECOND=?,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", gregorianCalendar0.toString());
      assertTrue(gregorianCalendar0.isLenient());
      
      gregorianCalendar0.setTimeZone((TimeZone) null);
      assertEquals("female", person0.getGender());
      assertEquals(1, person0.getGenderAsInt());
      assertEquals("", person0.getLastName());
      assertEquals("", person0.getFirstName());
      assertEquals(0, person0.getId());
      assertTrue(person0.isFemale());
      assertEquals(2, gregorianCalendar0.getFirstDayOfWeek());
      assertEquals(4, gregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals("java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=null,firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=?,YEAR=?,MONTH=?,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=?,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=?,HOUR=?,HOUR_OF_DAY=?,MINUTE=?,SECOND=?,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", gregorianCalendar0.toString());
      assertTrue(gregorianCalendar0.isLenient());
      
      // Undeclared exception!
      try { 
        person0.dateOfDeathEquals(gregorianCalendar0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Person person0 = Person.restorePerson(0, "", "", false);
      assertNotNull(person0);
      assertEquals("", person0.getLastName());
      assertEquals(0, person0.getGenderAsInt());
      assertEquals("male", person0.getGender());
      assertFalse(person0.isFemale());
      assertEquals("", person0.getFirstName());
      assertEquals(0, person0.getId());
      
      GregorianCalendar gregorianCalendar0 = new GregorianCalendar(0, 0, 0, 0, 0, 0);
      assertNotNull(gregorianCalendar0);
      assertEquals("java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=?,YEAR=0,MONTH=0,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=0,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", gregorianCalendar0.toString());
      assertEquals(2, gregorianCalendar0.getFirstDayOfWeek());
      assertEquals(4, gregorianCalendar0.getMinimalDaysInFirstWeek());
      assertTrue(gregorianCalendar0.isLenient());
      
      gregorianCalendar0.setLenient(false);
      assertEquals(2, gregorianCalendar0.getFirstDayOfWeek());
      assertEquals("java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=false,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=?,YEAR=0,MONTH=0,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=0,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", gregorianCalendar0.toString());
      assertEquals(4, gregorianCalendar0.getMinimalDaysInFirstWeek());
      assertFalse(gregorianCalendar0.isLenient());
      
      // Undeclared exception!
      try { 
        person0.dateOfDeathEquals(gregorianCalendar0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // YEAR
         //
         verifyException("java.util.GregorianCalendar", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Person person0 = new Person("", "", true);
      //  // Unstable assertion: assertNotNull(person0);
      //  // Unstable assertion: assertEquals("", person0.getFirstName());
      //  // Unstable assertion: assertEquals(17, person0.getId());
      //  // Unstable assertion: assertTrue(person0.isFemale());
      //  // Unstable assertion: assertEquals("female", person0.getGender());
      //  // Unstable assertion: assertEquals(1, person0.getGenderAsInt());
      //  // Unstable assertion: assertEquals("", person0.getLastName());
      
      person0.setDateOfBirth((GregorianCalendar) null);
      //  // Unstable assertion: assertEquals("", person0.getFirstName());
      //  // Unstable assertion: assertEquals(17, person0.getId());
      //  // Unstable assertion: assertTrue(person0.isFemale());
      //  // Unstable assertion: assertEquals("female", person0.getGender());
      //  // Unstable assertion: assertEquals(1, person0.getGenderAsInt());
      //  // Unstable assertion: assertEquals("", person0.getLastName());
      
      GregorianCalendar gregorianCalendar0 = person0.getDateOfDeath();
      //  // Unstable assertion: assertNotNull(gregorianCalendar0);
      //  // Unstable assertion: assertEquals("", person0.getFirstName());
      //  // Unstable assertion: assertEquals(17, person0.getId());
      //  // Unstable assertion: assertTrue(person0.isFemale());
      //  // Unstable assertion: assertEquals("female", person0.getGender());
      //  // Unstable assertion: assertEquals(1, person0.getGenderAsInt());
      //  // Unstable assertion: assertEquals("", person0.getLastName());
      //  // Unstable assertion: assertTrue(gregorianCalendar0.isLenient());
      //  // Unstable assertion: assertEquals(2, gregorianCalendar0.getFirstDayOfWeek());
      //  // Unstable assertion: assertEquals("java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=?,YEAR=?,MONTH=?,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=?,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=?,HOUR=?,HOUR_OF_DAY=?,MINUTE=?,SECOND=?,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", gregorianCalendar0.toString());
      //  // Unstable assertion: assertEquals(4, gregorianCalendar0.getMinimalDaysInFirstWeek());
      
      // Undeclared exception!
      try { 
        person0.dateOfBirthEquals(gregorianCalendar0);
       //  fail("Expecting exception: NullPointerException");
       // Unstable assertion
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("familytree.model.Person", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Person person0 = Person.restorePerson(0, "", "", true);
      assertNotNull(person0);
      assertEquals(1, person0.getGenderAsInt());
      assertEquals("", person0.getLastName());
      assertEquals("female", person0.getGender());
      assertEquals(0, person0.getId());
      assertEquals("", person0.getFirstName());
      assertTrue(person0.isFemale());
      
      GregorianCalendar gregorianCalendar0 = new GregorianCalendar(0, 0, 0, 0, 0, 0);
      assertNotNull(gregorianCalendar0);
      assertTrue(gregorianCalendar0.isLenient());
      assertEquals("java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=?,YEAR=0,MONTH=0,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=0,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", gregorianCalendar0.toString());
      assertEquals(4, gregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals(2, gregorianCalendar0.getFirstDayOfWeek());
      
      gregorianCalendar0.set(0, 2);
      assertEquals("java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=2,YEAR=0,MONTH=0,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=0,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", gregorianCalendar0.toString());
      assertTrue(gregorianCalendar0.isLenient());
      assertEquals(4, gregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals(2, gregorianCalendar0.getFirstDayOfWeek());
      
      // Undeclared exception!
      try { 
        person0.dateOfBirthEquals(gregorianCalendar0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid era
         //
         verifyException("java.util.GregorianCalendar", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Person person0 = new Person((String) null, "", false);
      //  // Unstable assertion: assertNotNull(person0);
      //  // Unstable assertion: assertNull(person0.getFirstName());
      //  // Unstable assertion: assertEquals("", person0.getLastName());
      //  // Unstable assertion: assertEquals("male", person0.getGender());
      //  // Unstable assertion: assertEquals(15, person0.getId());
      //  // Unstable assertion: assertEquals(0, person0.getGenderAsInt());
      //  // Unstable assertion: assertFalse(person0.isFemale());
      
      // Undeclared exception!
      try { 
        person0.addSpouse((Person) null);
       //  fail("Expecting exception: NullPointerException");
       // Unstable assertion
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("familytree.model.Person", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Person person0 = Person.restorePerson(0, "", "", true);
      assertNotNull(person0);
      assertEquals("female", person0.getGender());
      assertEquals(1, person0.getGenderAsInt());
      assertTrue(person0.isFemale());
      assertEquals(0, person0.getId());
      assertEquals("", person0.getLastName());
      assertEquals("", person0.getFirstName());
      
      // Undeclared exception!
      try { 
        person0.addChild((Person) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("familytree.model.Person", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Person person0 = Person.restorePerson(0, "", "", false);
      assertNotNull(person0);
      assertFalse(person0.isFemale());
      assertEquals("", person0.getLastName());
      assertEquals("male", person0.getGender());
      assertEquals(0, person0.getId());
      assertEquals(0, person0.getGenderAsInt());
      assertEquals("", person0.getFirstName());
      
      Person person1 = Person.restorePerson(0, "", "", false);
      assertNotNull(person1);
      assertFalse(person1.isFemale());
      assertEquals("", person1.getLastName());
      assertEquals(0, person1.getGenderAsInt());
      assertEquals("", person1.getFirstName());
      assertEquals("male", person1.getGender());
      assertEquals(0, person1.getId());
      assertNotSame(person1, person0);
      assertFalse(person1.equals((Object)person0));
      
      person0.addChild(person1);
      assertFalse(person0.isFemale());
      assertEquals("", person0.getLastName());
      assertEquals("male", person0.getGender());
      assertEquals(0, person0.getId());
      assertEquals(0, person0.getGenderAsInt());
      assertEquals("", person0.getFirstName());
      assertFalse(person1.isFemale());
      assertEquals("", person1.getLastName());
      assertEquals(0, person1.getGenderAsInt());
      assertEquals("", person1.getFirstName());
      assertEquals("male", person1.getGender());
      assertEquals(0, person1.getId());
      assertNotSame(person0, person1);
      assertNotSame(person1, person0);
      assertFalse(person0.equals((Object)person1));
      assertFalse(person1.equals((Object)person0));
      
      Relation relation0 = person1.getRelation(person0);
      assertNotNull(relation0);
      assertFalse(person0.isFemale());
      assertEquals("", person0.getLastName());
      assertEquals("male", person0.getGender());
      assertEquals(0, person0.getId());
      assertEquals(0, person0.getGenderAsInt());
      assertEquals("", person0.getFirstName());
      assertFalse(person1.isFemale());
      assertEquals("", person1.getLastName());
      assertEquals(0, person1.getGenderAsInt());
      assertEquals("", person1.getFirstName());
      assertEquals("male", person1.getGender());
      assertEquals(0, person1.getId());
      assertNotSame(person0, person1);
      assertNotSame(person1, person0);
      assertFalse(person0.equals((Object)person1));
      assertFalse(person1.equals((Object)person0));
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Person person0 = Person.restorePerson(0, "", "", true);
      //  // Unstable assertion: assertNotNull(person0);
      //  // Unstable assertion: assertEquals("female", person0.getGender());
      //  // Unstable assertion: assertEquals(0, person0.getId());
      //  // Unstable assertion: assertTrue(person0.isFemale());
      //  // Unstable assertion: assertEquals("", person0.getFirstName());
      //  // Unstable assertion: assertEquals("", person0.getLastName());
      //  // Unstable assertion: assertEquals(1, person0.getGenderAsInt());
      
      Person person1 = new Person("", "", true);
      //  // Unstable assertion: assertNotNull(person1);
      //  // Unstable assertion: assertEquals("", person1.getFirstName());
      //  // Unstable assertion: assertTrue(person1.isFemale());
      //  // Unstable assertion: assertEquals(10, person1.getId());
      //  // Unstable assertion: assertEquals("female", person1.getGender());
      //  // Unstable assertion: assertEquals("", person1.getLastName());
      //  // Unstable assertion: assertEquals(1, person1.getGenderAsInt());
      //  // Unstable assertion: assertFalse(person1.equals((Object)person0));
      
      person0.addChild(person1);
      //  // Unstable assertion: assertEquals("female", person0.getGender());
      //  // Unstable assertion: assertEquals(0, person0.getId());
      //  // Unstable assertion: assertTrue(person0.isFemale());
      //  // Unstable assertion: assertEquals("", person0.getFirstName());
      //  // Unstable assertion: assertEquals("", person0.getLastName());
      //  // Unstable assertion: assertEquals(1, person0.getGenderAsInt());
      //  // Unstable assertion: assertEquals("", person1.getFirstName());
      //  // Unstable assertion: assertTrue(person1.isFemale());
      //  // Unstable assertion: assertEquals(10, person1.getId());
      //  // Unstable assertion: assertEquals("female", person1.getGender());
      //  // Unstable assertion: assertEquals("", person1.getLastName());
      //  // Unstable assertion: assertEquals(1, person1.getGenderAsInt());
      //  // Unstable assertion: assertNotSame(person0, person1);
      //  // Unstable assertion: assertNotSame(person1, person0);
      //  // Unstable assertion: assertFalse(person0.equals((Object)person1));
      //  // Unstable assertion: assertFalse(person1.equals((Object)person0));
      
      Person person2 = Person.restorePerson(0, "", "", false);
      //  // Unstable assertion: assertNotNull(person2);
      //  // Unstable assertion: assertEquals("", person2.getLastName());
      //  // Unstable assertion: assertFalse(person2.isFemale());
      //  // Unstable assertion: assertEquals("", person2.getFirstName());
      //  // Unstable assertion: assertEquals(0, person2.getGenderAsInt());
      //  // Unstable assertion: assertEquals(0, person2.getId());
      //  // Unstable assertion: assertEquals("male", person2.getGender());
      //  // Unstable assertion: assertNotSame(person2, person0);
      //  // Unstable assertion: assertNotSame(person2, person1);
      //  // Unstable assertion: assertFalse(person2.equals((Object)person0));
      //  // Unstable assertion: assertFalse(person2.equals((Object)person1));
      
      Relation relation0 = person0.getRelation(person2);
      //  // Unstable assertion: assertNull(relation0);
      //  // Unstable assertion: assertEquals("female", person0.getGender());
      //  // Unstable assertion: assertEquals(0, person0.getId());
      //  // Unstable assertion: assertTrue(person0.isFemale());
      //  // Unstable assertion: assertEquals("", person0.getFirstName());
      //  // Unstable assertion: assertEquals("", person0.getLastName());
      //  // Unstable assertion: assertEquals(1, person0.getGenderAsInt());
      //  // Unstable assertion: assertEquals("", person2.getLastName());
      //  // Unstable assertion: assertFalse(person2.isFemale());
      //  // Unstable assertion: assertEquals("", person2.getFirstName());
      //  // Unstable assertion: assertEquals(0, person2.getGenderAsInt());
      //  // Unstable assertion: assertEquals(0, person2.getId());
      //  // Unstable assertion: assertEquals("male", person2.getGender());
      //  // Unstable assertion: assertNotSame(person0, person2);
      //  // Unstable assertion: assertNotSame(person0, person1);
      //  // Unstable assertion: assertNotSame(person2, person0);
      //  // Unstable assertion: assertNotSame(person2, person1);
      //  // Unstable assertion: assertFalse(person0.equals((Object)person2));
      //  // Unstable assertion: assertFalse(person0.equals((Object)person1));
      //  // Unstable assertion: assertFalse(person2.equals((Object)person0));
      //  // Unstable assertion: assertFalse(person2.equals((Object)person1));
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Person person0 = new Person("", "", true);
      //  // Unstable assertion: assertNotNull(person0);
      //  // Unstable assertion: assertTrue(person0.isFemale());
      //  // Unstable assertion: assertEquals("female", person0.getGender());
      //  // Unstable assertion: assertEquals(1, person0.getGenderAsInt());
      //  // Unstable assertion: assertEquals(7, person0.getId());
      //  // Unstable assertion: assertEquals("", person0.getLastName());
      //  // Unstable assertion: assertEquals("", person0.getFirstName());
      
      Person person1 = new Person("", "", true);
      //  // Unstable assertion: assertNotNull(person1);
      //  // Unstable assertion: assertTrue(person1.isFemale());
      //  // Unstable assertion: assertEquals(8, person1.getId());
      //  // Unstable assertion: assertEquals("", person1.getFirstName());
      //  // Unstable assertion: assertEquals("female", person1.getGender());
      //  // Unstable assertion: assertEquals("", person1.getLastName());
      //  // Unstable assertion: assertEquals(1, person1.getGenderAsInt());
      //  // Unstable assertion: assertFalse(person1.equals((Object)person0));
      
      person1.addChild(person0);
      //  // Unstable assertion: assertTrue(person0.isFemale());
      //  // Unstable assertion: assertEquals("female", person0.getGender());
      //  // Unstable assertion: assertEquals(1, person0.getGenderAsInt());
      //  // Unstable assertion: assertEquals(7, person0.getId());
      //  // Unstable assertion: assertEquals("", person0.getLastName());
      //  // Unstable assertion: assertEquals("", person0.getFirstName());
      //  // Unstable assertion: assertTrue(person1.isFemale());
      //  // Unstable assertion: assertEquals(8, person1.getId());
      //  // Unstable assertion: assertEquals("", person1.getFirstName());
      //  // Unstable assertion: assertEquals("female", person1.getGender());
      //  // Unstable assertion: assertEquals("", person1.getLastName());
      //  // Unstable assertion: assertEquals(1, person1.getGenderAsInt());
      //  // Unstable assertion: assertNotSame(person0, person1);
      //  // Unstable assertion: assertNotSame(person1, person0);
      //  // Unstable assertion: assertFalse(person0.equals((Object)person1));
      //  // Unstable assertion: assertFalse(person1.equals((Object)person0));
      
      Relation relation0 = person0.getRelation(person0);
      //  // Unstable assertion: assertNull(relation0);
      //  // Unstable assertion: assertTrue(person0.isFemale());
      //  // Unstable assertion: assertEquals("female", person0.getGender());
      //  // Unstable assertion: assertEquals(1, person0.getGenderAsInt());
      //  // Unstable assertion: assertEquals(7, person0.getId());
      //  // Unstable assertion: assertEquals("", person0.getLastName());
      //  // Unstable assertion: assertEquals("", person0.getFirstName());
      //  // Unstable assertion: assertNotSame(person0, person1);
      //  // Unstable assertion: assertFalse(person0.equals((Object)person1));
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Person person0 = Person.restorePerson(0, "", "", true);
      //  // Unstable assertion: assertNotNull(person0);
      //  // Unstable assertion: assertTrue(person0.isFemale());
      //  // Unstable assertion: assertEquals("female", person0.getGender());
      //  // Unstable assertion: assertEquals(0, person0.getId());
      //  // Unstable assertion: assertEquals("", person0.getFirstName());
      //  // Unstable assertion: assertEquals("", person0.getLastName());
      //  // Unstable assertion: assertEquals(1, person0.getGenderAsInt());
      
      Person person1 = new Person("", "", true);
      //  // Unstable assertion: assertNotNull(person1);
      //  // Unstable assertion: assertEquals("", person1.getFirstName());
      //  // Unstable assertion: assertEquals(1, person1.getGenderAsInt());
      //  // Unstable assertion: assertEquals(6, person1.getId());
      //  // Unstable assertion: assertEquals("", person1.getLastName());
      //  // Unstable assertion: assertEquals("female", person1.getGender());
      //  // Unstable assertion: assertTrue(person1.isFemale());
      //  // Unstable assertion: assertFalse(person1.equals((Object)person0));
      
      person0.addChild(person1);
      //  // Unstable assertion: assertTrue(person0.isFemale());
      //  // Unstable assertion: assertEquals("female", person0.getGender());
      //  // Unstable assertion: assertEquals(0, person0.getId());
      //  // Unstable assertion: assertEquals("", person0.getFirstName());
      //  // Unstable assertion: assertEquals("", person0.getLastName());
      //  // Unstable assertion: assertEquals(1, person0.getGenderAsInt());
      //  // Unstable assertion: assertEquals("", person1.getFirstName());
      //  // Unstable assertion: assertEquals(1, person1.getGenderAsInt());
      //  // Unstable assertion: assertEquals(6, person1.getId());
      //  // Unstable assertion: assertEquals("", person1.getLastName());
      //  // Unstable assertion: assertEquals("female", person1.getGender());
      //  // Unstable assertion: assertTrue(person1.isFemale());
      //  // Unstable assertion: assertNotSame(person0, person1);
      //  // Unstable assertion: assertNotSame(person1, person0);
      //  // Unstable assertion: assertFalse(person0.equals((Object)person1));
      //  // Unstable assertion: assertFalse(person1.equals((Object)person0));
      
      Relation relation0 = person0.getRelation(person1);
      //  // Unstable assertion: assertNotNull(relation0);
      //  // Unstable assertion: assertTrue(person0.isFemale());
      //  // Unstable assertion: assertEquals("female", person0.getGender());
      //  // Unstable assertion: assertEquals(0, person0.getId());
      //  // Unstable assertion: assertEquals("", person0.getFirstName());
      //  // Unstable assertion: assertEquals("", person0.getLastName());
      //  // Unstable assertion: assertEquals(1, person0.getGenderAsInt());
      //  // Unstable assertion: assertEquals("", person1.getFirstName());
      //  // Unstable assertion: assertEquals(1, person1.getGenderAsInt());
      //  // Unstable assertion: assertEquals(6, person1.getId());
      //  // Unstable assertion: assertEquals("", person1.getLastName());
      //  // Unstable assertion: assertEquals("female", person1.getGender());
      //  // Unstable assertion: assertTrue(person1.isFemale());
      //  // Unstable assertion: assertNotSame(person0, person1);
      //  // Unstable assertion: assertNotSame(person1, person0);
      //  // Unstable assertion: assertFalse(person0.equals((Object)person1));
      //  // Unstable assertion: assertFalse(person1.equals((Object)person0));
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Person person0 = new Person("", "", true);
      //  // Unstable assertion: assertNotNull(person0);
      //  // Unstable assertion: assertEquals("", person0.getLastName());
      //  // Unstable assertion: assertEquals(4, person0.getId());
      //  // Unstable assertion: assertEquals("", person0.getFirstName());
      //  // Unstable assertion: assertEquals("female", person0.getGender());
      //  // Unstable assertion: assertEquals(1, person0.getGenderAsInt());
      //  // Unstable assertion: assertTrue(person0.isFemale());
      
      Vector vector0 = person0.getRelationships();
      //  // Unstable assertion: assertNotNull(vector0);
      //  // Unstable assertion: assertEquals("", person0.getLastName());
      //  // Unstable assertion: assertEquals(4, person0.getId());
      //  // Unstable assertion: assertEquals("", person0.getFirstName());
      //  // Unstable assertion: assertEquals("female", person0.getGender());
      //  // Unstable assertion: assertEquals(1, person0.getGenderAsInt());
      //  // Unstable assertion: assertTrue(person0.isFemale());
      //  // Unstable assertion: assertEquals(10, vector0.capacity());
      //  // Unstable assertion: assertEquals(0, vector0.size());
      //  // Unstable assertion: assertEquals("[]", vector0.toString());
      //  // Unstable assertion: assertTrue(vector0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Person person0 = Person.restorePerson(0, "", "", false);
      assertNotNull(person0);
      assertEquals("", person0.getLastName());
      assertEquals(0, person0.getGenderAsInt());
      assertFalse(person0.isFemale());
      assertEquals("", person0.getFirstName());
      assertEquals(0, person0.getId());
      assertEquals("male", person0.getGender());
      
      GregorianCalendar gregorianCalendar0 = person0.getDateOfBirth();
      assertNotNull(gregorianCalendar0);
      assertEquals("", person0.getLastName());
      assertEquals(0, person0.getGenderAsInt());
      assertFalse(person0.isFemale());
      assertEquals("", person0.getFirstName());
      assertEquals(0, person0.getId());
      assertEquals("male", person0.getGender());
      assertEquals(4, gregorianCalendar0.getMinimalDaysInFirstWeek());
      assertTrue(gregorianCalendar0.isLenient());
      assertEquals(2, gregorianCalendar0.getFirstDayOfWeek());
      assertEquals("java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=?,YEAR=?,MONTH=?,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=?,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=?,HOUR=?,HOUR_OF_DAY=?,MINUTE=?,SECOND=?,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", gregorianCalendar0.toString());
      
      gregorianCalendar0.roll(1, false);
      assertEquals("", person0.getLastName());
      assertEquals(0, person0.getGenderAsInt());
      assertFalse(person0.isFemale());
      assertEquals("", person0.getFirstName());
      assertEquals(0, person0.getId());
      assertEquals("male", person0.getGender());
      assertEquals(4, gregorianCalendar0.getMinimalDaysInFirstWeek());
      assertTrue(gregorianCalendar0.isLenient());
      assertEquals(2, gregorianCalendar0.getFirstDayOfWeek());
      assertEquals("java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=1969,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]", gregorianCalendar0.toString());
      
      boolean boolean0 = person0.dateOfDeathEquals(gregorianCalendar0);
      assertEquals("", person0.getLastName());
      assertEquals(0, person0.getGenderAsInt());
      assertFalse(person0.isFemale());
      assertEquals("", person0.getFirstName());
      assertEquals(0, person0.getId());
      assertEquals("male", person0.getGender());
      assertEquals(4, gregorianCalendar0.getMinimalDaysInFirstWeek());
      assertTrue(gregorianCalendar0.isLenient());
      assertEquals(2, gregorianCalendar0.getFirstDayOfWeek());
      assertEquals("java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=1969,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]", gregorianCalendar0.toString());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Person person0 = new Person("", "", true);
      GregorianCalendar gregorianCalendar0 = person0.getDateOfDeath();
      gregorianCalendar0.roll(2, 1);
      boolean boolean0 = person0.dateOfDeathEquals(gregorianCalendar0);
      assertEquals("java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=1970,MONTH=1,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]", gregorianCalendar0.toString());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Person person0 = new Person("", "", true);
      GregorianCalendar gregorianCalendar0 = person0.getDateOfDeath();
      gregorianCalendar0.roll(0, 1);
      boolean boolean0 = person0.dateOfDeathEquals(gregorianCalendar0);
      assertEquals("java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=0,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]", gregorianCalendar0.toString());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Person person0 = Person.restorePerson(0, "", "", true);
      GregorianCalendar gregorianCalendar0 = new GregorianCalendar();
      boolean boolean0 = person0.dateOfDeathEquals(gregorianCalendar0);
      //  // Unstable assertion: assertEquals("java.util.GregorianCalendar[time=1570056648707,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2019,MONTH=9,WEEK_OF_YEAR=40,WEEK_OF_MONTH=1,DAY_OF_MONTH=2,DAY_OF_YEAR=275,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=1,AM_PM=1,HOUR=10,HOUR_OF_DAY=22,MINUTE=50,SECOND=48,MILLISECOND=707,ZONE_OFFSET=0,DST_OFFSET=0]", gregorianCalendar0.toString());
      //  // Unstable assertion: assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Person person0 = Person.restorePerson(0, "", "", true);
      boolean boolean0 = person0.dateOfDeathEquals((Calendar) null);
      assertEquals(0, person0.getId());
      assertEquals("female", person0.getGender());
      assertFalse(boolean0);
      assertEquals("", person0.getLastName());
      assertEquals("", person0.getFirstName());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Person person0 = Person.restorePerson(0, "", "", false);
      GregorianCalendar gregorianCalendar0 = person0.getDateOfBirth();
      gregorianCalendar0.roll(1, false);
      boolean boolean0 = person0.dateOfBirthEquals(gregorianCalendar0);
      assertEquals("java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=1969,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]", gregorianCalendar0.toString());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Person person0 = new Person("", "", true);
      GregorianCalendar gregorianCalendar0 = person0.getDateOfDeath();
      gregorianCalendar0.roll(2, 1);
      boolean boolean0 = person0.dateOfBirthEquals(gregorianCalendar0);
      assertEquals("java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=1970,MONTH=1,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]", gregorianCalendar0.toString());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Person person0 = Person.restorePerson(0, (String) null, "", true);
      GregorianCalendar gregorianCalendar0 = person0.getDateOfBirth();
      gregorianCalendar0.set(0, 0, 2);
      boolean boolean0 = person0.dateOfBirthEquals(gregorianCalendar0);
      assertEquals("java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=?,YEAR=0,MONTH=0,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=2,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=?,HOUR=?,HOUR_OF_DAY=?,MINUTE=?,SECOND=?,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", gregorianCalendar0.toString());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Person person0 = new Person("", "", true);
      GregorianCalendar gregorianCalendar0 = person0.getDateOfDeath();
      gregorianCalendar0.roll(0, 1);
      boolean boolean0 = person0.dateOfBirthEquals(gregorianCalendar0);
      assertEquals("java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=0,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]", gregorianCalendar0.toString());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Person person0 = Person.restorePerson(0, "", "", true);
      boolean boolean0 = person0.dateOfBirthEquals((Calendar) null);
      assertEquals(0, person0.getId());
      assertEquals("", person0.getFirstName());
      assertEquals("", person0.getLastName());
      assertFalse(boolean0);
      assertTrue(person0.isFemale());
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Person person0 = new Person("", "", true);
      GregorianCalendar gregorianCalendar0 = person0.getDateOfDeath();
      boolean boolean0 = person0.dateOfBirthEquals(gregorianCalendar0);
      //  // Unstable assertion: assertEquals((-5), person0.getId());
      //  // Unstable assertion: assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Person person0 = new Person("", "", true);
      int int0 = person0.getGenderAsInt();
      //  // Unstable assertion: assertEquals(1, int0);
      //  // Unstable assertion: assertEquals((-6), person0.getId());
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Person person0 = Person.restorePerson(0, "", "", false);
      int int0 = person0.getGenderAsInt();
      assertEquals(0, person0.getId());
      assertEquals("", person0.getFirstName());
      assertEquals(0, int0);
      assertEquals("", person0.getLastName());
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Person person0 = Person.restorePerson(0, "", (String) null, true);
      String string0 = person0.getGender();
      assertEquals("", person0.getFirstName());
      assertEquals("female", string0);
      assertEquals(0, person0.getId());
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Person person0 = new Person("", "", false);
      person0.getGender();
      //  // Unstable assertion: assertEquals(57, person0.getId());
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Person person0 = Person.restorePerson(0, "", "", true);
      Person person1 = Person.restorePerson(0, "", "", false);
      person0.addChild(person1);
      Vector vector0 = person1.getChildren();
      assertEquals(0, person1.getId());
      assertEquals("", person1.getFirstName());
      assertEquals("", person1.getLastName());
      assertEquals(0, vector0.size());
      assertEquals(0, person1.getGenderAsInt());
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Person person0 = new Person("", "", false);
      Person person1 = new Person("", "", false);
      person0.addChild(person1);
      //  // Unstable assertion: assertEquals(34, person1.getId());
      
      person0.getChildren();
      //  // Unstable assertion: assertEquals(33, person0.getId());
      //  // Unstable assertion: assertFalse(person0.isFemale());
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Person person0 = new Person("", "", false);
      Person person1 = new Person("", "", false);
      person0.addChild(person1);
      //  // Unstable assertion: assertEquals(33, person0.getId());
      
      boolean boolean0 = person1.removeRelation(person1);
      //  // Unstable assertion: assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Person person0 = new Person("", "", false);
      Person person1 = new Person("", "", false);
      person0.addChild(person1);
      boolean boolean0 = person1.removeRelation(person0);
      //  // Unstable assertion: assertEquals((-16), person0.getId());
      //  // Unstable assertion: assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Person person0 = new Person("", "", false);
      Person person1 = new Person("", "", false);
      person0.addChild(person1);
      Person person2 = new Person("", "", false);
      person0.addChild(person2);
      try { 
        person1.addSpouse(person2);
        fail("Expecting exception: AddRelationException");
      
      } catch(AddRelationException e) {
         //
         // Relation exists or is illegal
         //
         verifyException("familytree.model.Person", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Person person0 = Person.restorePerson(0, "", "", true);
      Person person1 = new Person("", "", true);
      person0.addChild(person1);
      Person person2 = Person.restorePerson(0, "", "", true);
      person0.addSpouse(person2);
      person2.addChild(person1);
      //  // Unstable assertion: assertEquals(44, person1.getId());
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Person person0 = Person.restorePerson(0, "", "", false);
      Person person1 = new Person("", "", true);
      person0.addSpouse(person1);
      try { 
        person1.addSpouse(person0);
        fail("Expecting exception: AddRelationException");
      
      } catch(AddRelationException e) {
         //
         // Relation exists or is illegal
         //
         verifyException("familytree.model.Person", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Person person0 = Person.restorePerson(0, "", "", true);
      try { 
        person0.addSpouse(person0);
        fail("Expecting exception: AddRelationException");
      
      } catch(AddRelationException e) {
         //
         // Relation exists or is illegal
         //
         verifyException("familytree.model.Person", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Person person0 = new Person("", "", false);
      int int0 = person0.getId();
      //  // Unstable assertion: assertEquals(9, int0);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Person person0 = Person.restorePerson(0, "", "", false);
      String string0 = person0.getFirstName();
      assertEquals(0, person0.getId());
      assertEquals("", string0);
      assertEquals("", person0.getLastName());
      assertEquals(0, person0.getGenderAsInt());
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Person person0 = Person.restorePerson(0, "", "", true);
      GregorianCalendar gregorianCalendar0 = person0.getDateOfDeath();
      boolean boolean0 = person0.dateOfDeathEquals(gregorianCalendar0);
      assertEquals("", person0.getLastName());
      assertEquals(0, person0.getId());
      assertTrue(person0.isFemale());
      assertTrue(boolean0);
      assertEquals("", person0.getFirstName());
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Person person0 = new Person("", "", false);
      person0.toString();
      //  // Unstable assertion: assertEquals(43, person0.getId());
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Person person0 = Person.restorePerson(0, "", "", true);
      Person person1 = Person.restorePerson(0, "", "", false);
      person0.addChild(person1);
      Person person2 = Person.restorePerson(0, "", "", false);
      person1.addChild(person2);
      person0.addChild(person2);
      assertEquals("", person2.getFirstName());
      assertEquals("", person2.getLastName());
      assertFalse(person2.isFemale());
      assertEquals(0, person2.getId());
      assertEquals("", person0.getLastName());
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Person person0 = Person.restorePerson(0, "", "", false);
      String string0 = person0.getLastName();
      assertEquals("", string0);
      assertEquals("", person0.getFirstName());
      assertEquals(0, person0.getId());
      assertEquals("male", person0.getGender());
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Person person0 = Person.restorePerson(0, "", "", true);
      person0.setLastName("");
      assertTrue(person0.isFemale());
      assertEquals("", person0.getFirstName());
      assertEquals(0, person0.getId());
      assertEquals("", person0.getLastName());
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Person person0 = new Person("", "", true);
      person0.setFirstName("");
      //  // Unstable assertion: assertEquals((-8), person0.getId());
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Person person0 = Person.restorePerson(0, "", "", true);
      try { 
        person0.addChild(person0);
        fail("Expecting exception: AddRelationException");
      
      } catch(AddRelationException e) {
         //
         // Relation exists or is illegal
         //
         verifyException("familytree.model.Person", e);
      }
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Person person0 = Person.restorePerson(0, "", "", false);
      boolean boolean0 = person0.isFemale();
      assertEquals(0, person0.getId());
      assertFalse(boolean0);
      assertEquals("", person0.getLastName());
      assertEquals("", person0.getFirstName());
  }
}
